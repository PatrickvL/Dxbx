// Dxbx note : Below is the header of nouveau_class.h, from which the
// contents of this unit was taken :
(*************************************************************************

   Autogenerated file, do not edit !

   This file was generated by renouveau-gen from renouveau.xml, the
   XML database of nvidia objects and methods. renouveau-gen and
   renouveau.xml can be found in CVS module renouveau of sourceforge.net
   project nouveau:

cvs -z3 -d:pserver:anonymous@nouveau.cvs.sourceforge.net:/cvsroot/nouveau co -P renouveau

**************************************************************************

   Copyright (C) 2006-2008 :
   Dmitry Baryshkov,
   Laurent Carlier,
   Matthieu Castet,
   Dawid Gajownik,
   Jeremy Kolb,
   Stephane Loeuillet,
   Patrice Mandin,
   Stephane Marchesin,
   Serge Martin,
   Sylvain Munaut,
   Simon Raffeiner,
   Ben Skeggs,
   Erik Waling,
   koala_br,

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*************************************************************************)

unit uNV2A;

interface

// Dxbx notes :
// - Changed NV20TCL_ into NV2A_
// - Added specific NV2A constants
// TODO : Add more (especially when they conflict with NV20)
uses
  // Dxbx
  uTypes;

const NV2A_SWIZZLED_SURFACE                                       = $0000009e;

const NV2A                                                        = $00000097;

const NV2A_NOP                                                    = $00000100;
const NV2A_NOTIFY                                                 = $00000104;
const NV2A_WAIT_FOR_IDLE                                          = $00000110; // Dxbx
const NV2A_DMA_NOTIFY                                             = $00000180;
const NV2A_FLIP_READ                                              = $00000120; // Dxbx
const NV2A_FLIP_WRITE                                             = $00000124; // Dxbx
const NV2A_FLIP_MODULO                                            = $00000128; // Dxbx
const NV2A_FLIP_INCREMENT_WRITE                                   = $0000012c; // Dxbx
const NV2A_FLIP_STALL                                             = $00000130; // Dxbx
const NV2A_DMA_TEXTURE0                                           = $00000184;
const NV2A_DMA_TEXTURE1                                           = $00000188;
const NV2A_DMA_STATE                                              = $00000190; // Dxbx
const NV2A_DMA_COLOR                                              = $00000194;
const NV2A_DMA_ZETA                                               = $00000198;
const NV2A_DMA_VTXBUF0                                            = $0000019c;
const NV2A_DMA_VTXBUF1                                            = $000001a0;
const NV2A_DMA_FENCE                                              = $000001a4;
const NV2A_DMA_QUERY                                              = $000001a8;
const NV2A_RT_HORIZ                                               = $00000200;
const  NV2A_RT_HORIZ_X_SHIFT                                      = 0;
const  NV2A_RT_HORIZ_X_MASK                                       = $0000ffff;
const  NV2A_RT_HORIZ_W_SHIFT                                      = 16;
const  NV2A_RT_HORIZ_W_MASK                                       = $ffff0000;
const NV2A_RT_VERT                                                = $00000204;
const  NV2A_RT_VERT_Y_SHIFT                                       = 0;
const  NV2A_RT_VERT_Y_MASK                                        = $0000ffff;
const  NV2A_RT_VERT_H_SHIFT                                       = 16;
const  NV2A_RT_VERT_H_MASK                                        = $ffff0000;
const NV2A_RT_FORMAT                                              = $00000208;
const  NV2A_RT_FORMAT_TYPE_SHIFT                                  = 8;
const  NV2A_RT_FORMAT_TYPE_MASK                                   = $00000f00;
const   NV2A_RT_FORMAT_TYPE_LINEAR                                = $00000100;
const   NV2A_RT_FORMAT_TYPE_SWIZZLED                              = $00000200;
const  NV2A_RT_FORMAT_COLOR_SHIFT                                 = 0;
const  NV2A_RT_FORMAT_COLOR_MASK                                  = $0000001f;
const   NV2A_RT_FORMAT_COLOR_R5G6B5                               = $00000003;
const   NV2A_RT_FORMAT_COLOR_X8R8G8B8                             = $00000005;
const   NV2A_RT_FORMAT_COLOR_A8R8G8B8                             = $00000008;
const   NV2A_RT_FORMAT_COLOR_B8                                   = $00000009;
const   NV2A_RT_FORMAT_COLOR_UNKNOWN                              = $0000000d;
const   NV2A_RT_FORMAT_COLOR_X8B8G8R8                             = $0000000f;
const   NV2A_RT_FORMAT_COLOR_A8B8G8R8                             = $00000010;
const NV2A_RT_PITCH                                               = $0000020c;
const  NV2A_RT_PITCH_COLOR_PITCH_SHIFT                            = 0;
const  NV2A_RT_PITCH_COLOR_PITCH_MASK                             = $0000ffff;
const  NV2A_RT_PITCH_ZETA_PITCH_SHIFT                             = 16;
const  NV2A_RT_PITCH_ZETA_PITCH_MASK                              = $ffff0000;
const NV2A_COLOR_OFFSET                                           = $00000210;
const NV2A_ZETA_OFFSET                                            = $00000214;
//const NV2A_RC_IN_ALPHA(x)                                       = ($00000260+((x)*4));
const NV2A_RC_IN_ALPHA__0                                         = ($00000260+((0)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__1                                         = ($00000260+((1)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__2                                         = ($00000260+((2)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__3                                         = ($00000260+((3)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__4                                         = ($00000260+((4)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__5                                         = ($00000260+((5)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__6                                         = ($00000260+((6)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__7                                         = ($00000260+((7)*4)); // Dxbx
const NV2A_RC_IN_ALPHA__SIZE                                      = $00000008;
const  NV2A_RC_IN_ALPHA_D_INPUT_SHIFT                             = 0;
const  NV2A_RC_IN_ALPHA_D_INPUT_MASK                              = $0000000f;
const   NV2A_RC_IN_ALPHA_D_INPUT_ZERO                             = $00000000;
const   NV2A_RC_IN_ALPHA_D_INPUT_CONSTANT_COLOR0                  = $00000001;
const   NV2A_RC_IN_ALPHA_D_INPUT_CONSTANT_COLOR1                  = $00000002;
const   NV2A_RC_IN_ALPHA_D_INPUT_FOG                              = $00000003;
const   NV2A_RC_IN_ALPHA_D_INPUT_PRIMARY_COLOR                    = $00000004;
const   NV2A_RC_IN_ALPHA_D_INPUT_SECONDARY_COLOR                  = $00000005;
const   NV2A_RC_IN_ALPHA_D_INPUT_TEXTURE0                         = $00000008;
const   NV2A_RC_IN_ALPHA_D_INPUT_TEXTURE1                         = $00000009;
const   NV2A_RC_IN_ALPHA_D_INPUT_SPARE0                           = $0000000c;
const   NV2A_RC_IN_ALPHA_D_INPUT_SPARE1                           = $0000000d;
const   NV2A_RC_IN_ALPHA_D_INPUT_SPARE0_PLUS_SECONDARY_COLOR      = $0000000e;
const   NV2A_RC_IN_ALPHA_D_INPUT_E_TIMES_F                        = $0000000f;
const   NV2A_RC_IN_ALPHA_D_INPUT_TEXTURE2                         = $0000000a;
const   NV2A_RC_IN_ALPHA_D_INPUT_TEXTURE3                         = $0000000b;
const  NV2A_RC_IN_ALPHA_D_COMPONENT_USAGE                         = (1 shl  4);
const   NV2A_RC_IN_ALPHA_D_COMPONENT_USAGE_BLUE                   = $00000000;
const   NV2A_RC_IN_ALPHA_D_COMPONENT_USAGE_ALPHA                  = $00000010;
const  NV2A_RC_IN_ALPHA_D_MAPPING_SHIFT                           = 5;
const  NV2A_RC_IN_ALPHA_D_MAPPING_MASK                            = $000000e0;
const   NV2A_RC_IN_ALPHA_D_MAPPING_UNSIGNED_IDENTITY              = $00000000;
const   NV2A_RC_IN_ALPHA_D_MAPPING_UNSIGNED_INVERT                = $00000020;
const   NV2A_RC_IN_ALPHA_D_MAPPING_EXPAND_NORMAL                  = $00000040;
const   NV2A_RC_IN_ALPHA_D_MAPPING_EXPAND_NEGATE                  = $00000060;
const   NV2A_RC_IN_ALPHA_D_MAPPING_HALF_BIAS_NORMAL               = $00000080;
const   NV2A_RC_IN_ALPHA_D_MAPPING_HALF_BIAS_NEGATE               = $000000a0;
const   NV2A_RC_IN_ALPHA_D_MAPPING_SIGNED_IDENTITY                = $000000c0;
const   NV2A_RC_IN_ALPHA_D_MAPPING_SIGNED_NEGATE                  = $000000e0;
const  NV2A_RC_IN_ALPHA_C_INPUT_SHIFT                             = 8;
const  NV2A_RC_IN_ALPHA_C_INPUT_MASK                              = $00000f00;
const   NV2A_RC_IN_ALPHA_C_INPUT_ZERO                             = $00000000;
const   NV2A_RC_IN_ALPHA_C_INPUT_CONSTANT_COLOR0                  = $00000100;
const   NV2A_RC_IN_ALPHA_C_INPUT_CONSTANT_COLOR1                  = $00000200;
const   NV2A_RC_IN_ALPHA_C_INPUT_FOG                              = $00000300;
const   NV2A_RC_IN_ALPHA_C_INPUT_PRIMARY_COLOR                    = $00000400;
const   NV2A_RC_IN_ALPHA_C_INPUT_SECONDARY_COLOR                  = $00000500;
const   NV2A_RC_IN_ALPHA_C_INPUT_TEXTURE0                         = $00000800;
const   NV2A_RC_IN_ALPHA_C_INPUT_TEXTURE1                         = $00000900;
const   NV2A_RC_IN_ALPHA_C_INPUT_SPARE0                           = $00000c00;
const   NV2A_RC_IN_ALPHA_C_INPUT_SPARE1                           = $00000d00;
const   NV2A_RC_IN_ALPHA_C_INPUT_SPARE0_PLUS_SECONDARY_COLOR      = $00000e00;
const   NV2A_RC_IN_ALPHA_C_INPUT_E_TIMES_F                        = $00000f00;
const   NV2A_RC_IN_ALPHA_C_INPUT_TEXTURE2                         = $00000a00;
const   NV2A_RC_IN_ALPHA_C_INPUT_TEXTURE3                         = $00000b00;
const  NV2A_RC_IN_ALPHA_C_COMPONENT_USAGE                         = (1 shl 12);
const   NV2A_RC_IN_ALPHA_C_COMPONENT_USAGE_BLUE                   = $00000000;
const   NV2A_RC_IN_ALPHA_C_COMPONENT_USAGE_ALPHA                  = $00001000;
const  NV2A_RC_IN_ALPHA_C_MAPPING_SHIFT                           = 13;
const  NV2A_RC_IN_ALPHA_C_MAPPING_MASK                            = $0000e000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_UNSIGNED_IDENTITY              = $00000000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_UNSIGNED_INVERT                = $00002000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_EXPAND_NORMAL                  = $00004000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_EXPAND_NEGATE                  = $00006000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_HALF_BIAS_NORMAL               = $00008000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_HALF_BIAS_NEGATE               = $0000a000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_SIGNED_IDENTITY                = $0000c000;
const   NV2A_RC_IN_ALPHA_C_MAPPING_SIGNED_NEGATE                  = $0000e000;
const  NV2A_RC_IN_ALPHA_B_INPUT_SHIFT                             = 16;
const  NV2A_RC_IN_ALPHA_B_INPUT_MASK                              = $000f0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_ZERO                             = $00000000;
const   NV2A_RC_IN_ALPHA_B_INPUT_CONSTANT_COLOR0                  = $00010000;
const   NV2A_RC_IN_ALPHA_B_INPUT_CONSTANT_COLOR1                  = $00020000;
const   NV2A_RC_IN_ALPHA_B_INPUT_FOG                              = $00030000;
const   NV2A_RC_IN_ALPHA_B_INPUT_PRIMARY_COLOR                    = $00040000;
const   NV2A_RC_IN_ALPHA_B_INPUT_SECONDARY_COLOR                  = $00050000;
const   NV2A_RC_IN_ALPHA_B_INPUT_TEXTURE0                         = $00080000;
const   NV2A_RC_IN_ALPHA_B_INPUT_TEXTURE1                         = $00090000;
const   NV2A_RC_IN_ALPHA_B_INPUT_SPARE0                           = $000c0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_SPARE1                           = $000d0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_SPARE0_PLUS_SECONDARY_COLOR      = $000e0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_E_TIMES_F                        = $000f0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_TEXTURE2                         = $000a0000;
const   NV2A_RC_IN_ALPHA_B_INPUT_TEXTURE3                         = $000b0000;
const  NV2A_RC_IN_ALPHA_B_COMPONENT_USAGE                         = (1 shl 20);
const   NV2A_RC_IN_ALPHA_B_COMPONENT_USAGE_BLUE                   = $00000000;
const   NV2A_RC_IN_ALPHA_B_COMPONENT_USAGE_ALPHA                  = $00100000;
const  NV2A_RC_IN_ALPHA_B_MAPPING_SHIFT                           = 21;
const  NV2A_RC_IN_ALPHA_B_MAPPING_MASK                            = $00e00000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_UNSIGNED_IDENTITY              = $00000000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_UNSIGNED_INVERT                = $00200000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_EXPAND_NORMAL                  = $00400000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_EXPAND_NEGATE                  = $00600000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_HALF_BIAS_NORMAL               = $00800000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_HALF_BIAS_NEGATE               = $00a00000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_SIGNED_IDENTITY                = $00c00000;
const   NV2A_RC_IN_ALPHA_B_MAPPING_SIGNED_NEGATE                  = $00e00000;
const  NV2A_RC_IN_ALPHA_A_INPUT_SHIFT                             = 24;
const  NV2A_RC_IN_ALPHA_A_INPUT_MASK                              = $0f000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_ZERO                             = $00000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_CONSTANT_COLOR0                  = $01000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_CONSTANT_COLOR1                  = $02000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_FOG                              = $03000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_PRIMARY_COLOR                    = $04000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_SECONDARY_COLOR                  = $05000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_TEXTURE0                         = $08000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_TEXTURE1                         = $09000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_SPARE0                           = $0c000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_SPARE1                           = $0d000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_SPARE0_PLUS_SECONDARY_COLOR      = $0e000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_E_TIMES_F                        = $0f000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_TEXTURE2                         = $0a000000;
const   NV2A_RC_IN_ALPHA_A_INPUT_TEXTURE3                         = $0b000000;
const  NV2A_RC_IN_ALPHA_A_COMPONENT_USAGE                         = (1 shl 28);
const   NV2A_RC_IN_ALPHA_A_COMPONENT_USAGE_BLUE                   = $00000000;
const   NV2A_RC_IN_ALPHA_A_COMPONENT_USAGE_ALPHA                  = $10000000;
const  NV2A_RC_IN_ALPHA_A_MAPPING_SHIFT                           = 29;
const  NV2A_RC_IN_ALPHA_A_MAPPING_MASK                            = $e0000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_UNSIGNED_IDENTITY              = $00000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_UNSIGNED_INVERT                = $20000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_EXPAND_NORMAL                  = $40000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_EXPAND_NEGATE                  = $60000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_HALF_BIAS_NORMAL               = $80000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_HALF_BIAS_NEGATE               = $a0000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_SIGNED_IDENTITY                = $c0000000;
const   NV2A_RC_IN_ALPHA_A_MAPPING_SIGNED_NEGATE                  = $e0000000;
const NV2A_RC_FINAL0                                              = $00000288;
const  NV2A_RC_FINAL0_D_INPUT_SHIFT                               = 0;
const  NV2A_RC_FINAL0_D_INPUT_MASK                                = $0000000f;
const   NV2A_RC_FINAL0_D_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL0_D_INPUT_CONSTANT_COLOR0                    = $00000001;
const   NV2A_RC_FINAL0_D_INPUT_CONSTANT_COLOR1                    = $00000002;
const   NV2A_RC_FINAL0_D_INPUT_FOG                                = $00000003;
const   NV2A_RC_FINAL0_D_INPUT_PRIMARY_COLOR                      = $00000004;
const   NV2A_RC_FINAL0_D_INPUT_SECONDARY_COLOR                    = $00000005;
const   NV2A_RC_FINAL0_D_INPUT_TEXTURE0                           = $00000008;
const   NV2A_RC_FINAL0_D_INPUT_TEXTURE1                           = $00000009;
const   NV2A_RC_FINAL0_D_INPUT_SPARE0                             = $0000000c;
const   NV2A_RC_FINAL0_D_INPUT_SPARE1                             = $0000000d;
const   NV2A_RC_FINAL0_D_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $0000000e;
const   NV2A_RC_FINAL0_D_INPUT_E_TIMES_F                          = $0000000f;
const   NV2A_RC_FINAL0_D_INPUT_TEXTURE2                           = $0000000a;
const   NV2A_RC_FINAL0_D_INPUT_TEXTURE3                           = $0000000b;
const  NV2A_RC_FINAL0_D_COMPONENT_USAGE                           = (1 shl  4);
const   NV2A_RC_FINAL0_D_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL0_D_COMPONENT_USAGE_ALPHA                    = $00000010;
const  NV2A_RC_FINAL0_D_MAPPING_SHIFT                             = 5;
const  NV2A_RC_FINAL0_D_MAPPING_MASK                              = $000000e0;
const   NV2A_RC_FINAL0_D_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL0_D_MAPPING_UNSIGNED_INVERT                  = $00000020;
const   NV2A_RC_FINAL0_D_MAPPING_EXPAND_NORMAL                    = $00000040;
const   NV2A_RC_FINAL0_D_MAPPING_EXPAND_NEGATE                    = $00000060;
const   NV2A_RC_FINAL0_D_MAPPING_HALF_BIAS_NORMAL                 = $00000080;
const   NV2A_RC_FINAL0_D_MAPPING_HALF_BIAS_NEGATE                 = $000000a0;
const   NV2A_RC_FINAL0_D_MAPPING_SIGNED_IDENTITY                  = $000000c0;
const   NV2A_RC_FINAL0_D_MAPPING_SIGNED_NEGATE                    = $000000e0;
const  NV2A_RC_FINAL0_C_INPUT_SHIFT                               = 8;
const  NV2A_RC_FINAL0_C_INPUT_MASK                                = $00000f00;
const   NV2A_RC_FINAL0_C_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL0_C_INPUT_CONSTANT_COLOR0                    = $00000100;
const   NV2A_RC_FINAL0_C_INPUT_CONSTANT_COLOR1                    = $00000200;
const   NV2A_RC_FINAL0_C_INPUT_FOG                                = $00000300;
const   NV2A_RC_FINAL0_C_INPUT_PRIMARY_COLOR                      = $00000400;
const   NV2A_RC_FINAL0_C_INPUT_SECONDARY_COLOR                    = $00000500;
const   NV2A_RC_FINAL0_C_INPUT_TEXTURE0                           = $00000800;
const   NV2A_RC_FINAL0_C_INPUT_TEXTURE1                           = $00000900;
const   NV2A_RC_FINAL0_C_INPUT_SPARE0                             = $00000c00;
const   NV2A_RC_FINAL0_C_INPUT_SPARE1                             = $00000d00;
const   NV2A_RC_FINAL0_C_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $00000e00;
const   NV2A_RC_FINAL0_C_INPUT_E_TIMES_F                          = $00000f00;
const   NV2A_RC_FINAL0_C_INPUT_TEXTURE2                           = $00000a00;
const   NV2A_RC_FINAL0_C_INPUT_TEXTURE3                           = $00000b00;
const  NV2A_RC_FINAL0_C_COMPONENT_USAGE                           = (1 shl 12);
const   NV2A_RC_FINAL0_C_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL0_C_COMPONENT_USAGE_ALPHA                    = $00001000;
const  NV2A_RC_FINAL0_C_MAPPING_SHIFT                             = 13;
const  NV2A_RC_FINAL0_C_MAPPING_MASK                              = $0000e000;
const   NV2A_RC_FINAL0_C_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL0_C_MAPPING_UNSIGNED_INVERT                  = $00002000;
const   NV2A_RC_FINAL0_C_MAPPING_EXPAND_NORMAL                    = $00004000;
const   NV2A_RC_FINAL0_C_MAPPING_EXPAND_NEGATE                    = $00006000;
const   NV2A_RC_FINAL0_C_MAPPING_HALF_BIAS_NORMAL                 = $00008000;
const   NV2A_RC_FINAL0_C_MAPPING_HALF_BIAS_NEGATE                 = $0000a000;
const   NV2A_RC_FINAL0_C_MAPPING_SIGNED_IDENTITY                  = $0000c000;
const   NV2A_RC_FINAL0_C_MAPPING_SIGNED_NEGATE                    = $0000e000;
const  NV2A_RC_FINAL0_B_INPUT_SHIFT                               = 16;
const  NV2A_RC_FINAL0_B_INPUT_MASK                                = $000f0000;
const   NV2A_RC_FINAL0_B_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL0_B_INPUT_CONSTANT_COLOR0                    = $00010000;
const   NV2A_RC_FINAL0_B_INPUT_CONSTANT_COLOR1                    = $00020000;
const   NV2A_RC_FINAL0_B_INPUT_FOG                                = $00030000;
const   NV2A_RC_FINAL0_B_INPUT_PRIMARY_COLOR                      = $00040000;
const   NV2A_RC_FINAL0_B_INPUT_SECONDARY_COLOR                    = $00050000;
const   NV2A_RC_FINAL0_B_INPUT_TEXTURE0                           = $00080000;
const   NV2A_RC_FINAL0_B_INPUT_TEXTURE1                           = $00090000;
const   NV2A_RC_FINAL0_B_INPUT_SPARE0                             = $000c0000;
const   NV2A_RC_FINAL0_B_INPUT_SPARE1                             = $000d0000;
const   NV2A_RC_FINAL0_B_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $000e0000;
const   NV2A_RC_FINAL0_B_INPUT_E_TIMES_F                          = $000f0000;
const   NV2A_RC_FINAL0_B_INPUT_TEXTURE2                           = $000a0000;
const   NV2A_RC_FINAL0_B_INPUT_TEXTURE3                           = $000b0000;
const  NV2A_RC_FINAL0_B_COMPONENT_USAGE                           = (1 shl 20);
const   NV2A_RC_FINAL0_B_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL0_B_COMPONENT_USAGE_ALPHA                    = $00100000;
const  NV2A_RC_FINAL0_B_MAPPING_SHIFT                             = 21;
const  NV2A_RC_FINAL0_B_MAPPING_MASK                              = $00e00000;
const   NV2A_RC_FINAL0_B_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL0_B_MAPPING_UNSIGNED_INVERT                  = $00200000;
const   NV2A_RC_FINAL0_B_MAPPING_EXPAND_NORMAL                    = $00400000;
const   NV2A_RC_FINAL0_B_MAPPING_EXPAND_NEGATE                    = $00600000;
const   NV2A_RC_FINAL0_B_MAPPING_HALF_BIAS_NORMAL                 = $00800000;
const   NV2A_RC_FINAL0_B_MAPPING_HALF_BIAS_NEGATE                 = $00a00000;
const   NV2A_RC_FINAL0_B_MAPPING_SIGNED_IDENTITY                  = $00c00000;
const   NV2A_RC_FINAL0_B_MAPPING_SIGNED_NEGATE                    = $00e00000;
const  NV2A_RC_FINAL0_A_INPUT_SHIFT                               = 24;
const  NV2A_RC_FINAL0_A_INPUT_MASK                                = $0f000000;
const   NV2A_RC_FINAL0_A_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL0_A_INPUT_CONSTANT_COLOR0                    = $01000000;
const   NV2A_RC_FINAL0_A_INPUT_CONSTANT_COLOR1                    = $02000000;
const   NV2A_RC_FINAL0_A_INPUT_FOG                                = $03000000;
const   NV2A_RC_FINAL0_A_INPUT_PRIMARY_COLOR                      = $04000000;
const   NV2A_RC_FINAL0_A_INPUT_SECONDARY_COLOR                    = $05000000;
const   NV2A_RC_FINAL0_A_INPUT_TEXTURE0                           = $08000000;
const   NV2A_RC_FINAL0_A_INPUT_TEXTURE1                           = $09000000;
const   NV2A_RC_FINAL0_A_INPUT_SPARE0                             = $0c000000;
const   NV2A_RC_FINAL0_A_INPUT_SPARE1                             = $0d000000;
const   NV2A_RC_FINAL0_A_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $0e000000;
const   NV2A_RC_FINAL0_A_INPUT_E_TIMES_F                          = $0f000000;
const   NV2A_RC_FINAL0_A_INPUT_TEXTURE2                           = $0a000000;
const   NV2A_RC_FINAL0_A_INPUT_TEXTURE3                           = $0b000000;
const  NV2A_RC_FINAL0_A_COMPONENT_USAGE                           = (1 shl 28);
const   NV2A_RC_FINAL0_A_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL0_A_COMPONENT_USAGE_ALPHA                    = $10000000;
const  NV2A_RC_FINAL0_A_MAPPING_SHIFT                             = 29;
const  NV2A_RC_FINAL0_A_MAPPING_MASK                              = $e0000000;
const   NV2A_RC_FINAL0_A_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL0_A_MAPPING_UNSIGNED_INVERT                  = $20000000;
const   NV2A_RC_FINAL0_A_MAPPING_EXPAND_NORMAL                    = $40000000;
const   NV2A_RC_FINAL0_A_MAPPING_EXPAND_NEGATE                    = $60000000;
const   NV2A_RC_FINAL0_A_MAPPING_HALF_BIAS_NORMAL                 = $80000000;
const   NV2A_RC_FINAL0_A_MAPPING_HALF_BIAS_NEGATE                 = $a0000000;
const   NV2A_RC_FINAL0_A_MAPPING_SIGNED_IDENTITY                  = $c0000000;
const   NV2A_RC_FINAL0_A_MAPPING_SIGNED_NEGATE                    = $e0000000;
const NV2A_RC_FINAL1                                              = $0000028c;
const  NV2A_RC_FINAL1_COLOR_SUM_CLAMP                             = (1 shl  7);
const  NV2A_RC_FINAL1_G_INPUT_SHIFT                               = 8;
const  NV2A_RC_FINAL1_G_INPUT_MASK                                = $00000f00;
const   NV2A_RC_FINAL1_G_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL1_G_INPUT_CONSTANT_COLOR0                    = $00000100;
const   NV2A_RC_FINAL1_G_INPUT_CONSTANT_COLOR1                    = $00000200;
const   NV2A_RC_FINAL1_G_INPUT_FOG                                = $00000300;
const   NV2A_RC_FINAL1_G_INPUT_PRIMARY_COLOR                      = $00000400;
const   NV2A_RC_FINAL1_G_INPUT_SECONDARY_COLOR                    = $00000500;
const   NV2A_RC_FINAL1_G_INPUT_TEXTURE0                           = $00000800;
const   NV2A_RC_FINAL1_G_INPUT_TEXTURE1                           = $00000900;
const   NV2A_RC_FINAL1_G_INPUT_SPARE0                             = $00000c00;
const   NV2A_RC_FINAL1_G_INPUT_SPARE1                             = $00000d00;
const   NV2A_RC_FINAL1_G_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $00000e00;
const   NV2A_RC_FINAL1_G_INPUT_E_TIMES_F                          = $00000f00;
const   NV2A_RC_FINAL1_G_INPUT_TEXTURE2                           = $00000a00;
const   NV2A_RC_FINAL1_G_INPUT_TEXTURE3                           = $00000b00;
const  NV2A_RC_FINAL1_G_COMPONENT_USAGE                           = (1 shl 12);
const   NV2A_RC_FINAL1_G_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL1_G_COMPONENT_USAGE_ALPHA                    = $00001000;
const  NV2A_RC_FINAL1_G_MAPPING_SHIFT                             = 13;
const  NV2A_RC_FINAL1_G_MAPPING_MASK                              = $0000e000;
const   NV2A_RC_FINAL1_G_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL1_G_MAPPING_UNSIGNED_INVERT                  = $00002000;
const   NV2A_RC_FINAL1_G_MAPPING_EXPAND_NORMAL                    = $00004000;
const   NV2A_RC_FINAL1_G_MAPPING_EXPAND_NEGATE                    = $00006000;
const   NV2A_RC_FINAL1_G_MAPPING_HALF_BIAS_NORMAL                 = $00008000;
const   NV2A_RC_FINAL1_G_MAPPING_HALF_BIAS_NEGATE                 = $0000a000;
const   NV2A_RC_FINAL1_G_MAPPING_SIGNED_IDENTITY                  = $0000c000;
const   NV2A_RC_FINAL1_G_MAPPING_SIGNED_NEGATE                    = $0000e000;
const  NV2A_RC_FINAL1_F_INPUT_SHIFT                               = 16;
const  NV2A_RC_FINAL1_F_INPUT_MASK                                = $000f0000;
const   NV2A_RC_FINAL1_F_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL1_F_INPUT_CONSTANT_COLOR0                    = $00010000;
const   NV2A_RC_FINAL1_F_INPUT_CONSTANT_COLOR1                    = $00020000;
const   NV2A_RC_FINAL1_F_INPUT_FOG                                = $00030000;
const   NV2A_RC_FINAL1_F_INPUT_PRIMARY_COLOR                      = $00040000;
const   NV2A_RC_FINAL1_F_INPUT_SECONDARY_COLOR                    = $00050000;
const   NV2A_RC_FINAL1_F_INPUT_TEXTURE0                           = $00080000;
const   NV2A_RC_FINAL1_F_INPUT_TEXTURE1                           = $00090000;
const   NV2A_RC_FINAL1_F_INPUT_SPARE0                             = $000c0000;
const   NV2A_RC_FINAL1_F_INPUT_SPARE1                             = $000d0000;
const   NV2A_RC_FINAL1_F_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $000e0000;
const   NV2A_RC_FINAL1_F_INPUT_E_TIMES_F                          = $000f0000;
const   NV2A_RC_FINAL1_F_INPUT_TEXTURE2                           = $000a0000;
const   NV2A_RC_FINAL1_F_INPUT_TEXTURE3                           = $000b0000;
const  NV2A_RC_FINAL1_F_COMPONENT_USAGE                           = (1 shl 20);
const   NV2A_RC_FINAL1_F_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL1_F_COMPONENT_USAGE_ALPHA                    = $00100000;
const  NV2A_RC_FINAL1_F_MAPPING_SHIFT                             = 21;
const  NV2A_RC_FINAL1_F_MAPPING_MASK                              = $00e00000;
const   NV2A_RC_FINAL1_F_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL1_F_MAPPING_UNSIGNED_INVERT                  = $00200000;
const   NV2A_RC_FINAL1_F_MAPPING_EXPAND_NORMAL                    = $00400000;
const   NV2A_RC_FINAL1_F_MAPPING_EXPAND_NEGATE                    = $00600000;
const   NV2A_RC_FINAL1_F_MAPPING_HALF_BIAS_NORMAL                 = $00800000;
const   NV2A_RC_FINAL1_F_MAPPING_HALF_BIAS_NEGATE                 = $00a00000;
const   NV2A_RC_FINAL1_F_MAPPING_SIGNED_IDENTITY                  = $00c00000;
const   NV2A_RC_FINAL1_F_MAPPING_SIGNED_NEGATE                    = $00e00000;
const  NV2A_RC_FINAL1_E_INPUT_SHIFT                               = 24;
const  NV2A_RC_FINAL1_E_INPUT_MASK                                = $0f000000;
const   NV2A_RC_FINAL1_E_INPUT_ZERO                               = $00000000;
const   NV2A_RC_FINAL1_E_INPUT_CONSTANT_COLOR0                    = $01000000;
const   NV2A_RC_FINAL1_E_INPUT_CONSTANT_COLOR1                    = $02000000;
const   NV2A_RC_FINAL1_E_INPUT_FOG                                = $03000000;
const   NV2A_RC_FINAL1_E_INPUT_PRIMARY_COLOR                      = $04000000;
const   NV2A_RC_FINAL1_E_INPUT_SECONDARY_COLOR                    = $05000000;
const   NV2A_RC_FINAL1_E_INPUT_TEXTURE0                           = $08000000;
const   NV2A_RC_FINAL1_E_INPUT_TEXTURE1                           = $09000000;
const   NV2A_RC_FINAL1_E_INPUT_SPARE0                             = $0c000000;
const   NV2A_RC_FINAL1_E_INPUT_SPARE1                             = $0d000000;
const   NV2A_RC_FINAL1_E_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $0e000000;
const   NV2A_RC_FINAL1_E_INPUT_E_TIMES_F                          = $0f000000;
const   NV2A_RC_FINAL1_E_INPUT_TEXTURE2                           = $0a000000;
const   NV2A_RC_FINAL1_E_INPUT_TEXTURE3                           = $0b000000;
const  NV2A_RC_FINAL1_E_COMPONENT_USAGE                           = (1 shl 28);
const   NV2A_RC_FINAL1_E_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_FINAL1_E_COMPONENT_USAGE_ALPHA                    = $10000000;
const  NV2A_RC_FINAL1_E_MAPPING_SHIFT                             = 29;
const  NV2A_RC_FINAL1_E_MAPPING_MASK                              = $e0000000;
const   NV2A_RC_FINAL1_E_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_FINAL1_E_MAPPING_UNSIGNED_INVERT                  = $20000000;
const   NV2A_RC_FINAL1_E_MAPPING_EXPAND_NORMAL                    = $40000000;
const   NV2A_RC_FINAL1_E_MAPPING_EXPAND_NEGATE                    = $60000000;
const   NV2A_RC_FINAL1_E_MAPPING_HALF_BIAS_NORMAL                 = $80000000;
const   NV2A_RC_FINAL1_E_MAPPING_HALF_BIAS_NEGATE                 = $a0000000;
const   NV2A_RC_FINAL1_E_MAPPING_SIGNED_IDENTITY                  = $c0000000;
const   NV2A_RC_FINAL1_E_MAPPING_SIGNED_NEGATE                    = $e0000000;
const NV2A_CONTROL0                                               = $00000290; // Dxbx
const NV2A_LIGHT_MODEL                                            = $00000294;
const  NV2A_LIGHT_MODEL_VIEWER_SHIFT                              = 16;
const  NV2A_LIGHT_MODEL_VIEWER_MASK                               = $00030000;
const   NV2A_LIGHT_MODEL_VIEWER_NONLOCAL                          = $00020000;
const   NV2A_LIGHT_MODEL_VIEWER_LOCAL                             = $00030000;
const  NV2A_LIGHT_MODEL_SEPARATE_SPECULAR                         = (1 shl  0);
const NV2A_COLOR_MATERIAL                                         = $00000298;
const  NV2A_COLOR_MATERIAL_FRONT_EMISSION_SHIFT                   = 0;
const  NV2A_COLOR_MATERIAL_FRONT_EMISSION_MASK                    = $00000003;
const   NV2A_COLOR_MATERIAL_FRONT_EMISSION_OFF                    = $00000000;
const   NV2A_COLOR_MATERIAL_FRONT_EMISSION_COL1                   = $00000001;
const   NV2A_COLOR_MATERIAL_FRONT_EMISSION_COL2                   = $00000002;
const  NV2A_COLOR_MATERIAL_FRONT_AMBIENT_SHIFT                    = 2;
const  NV2A_COLOR_MATERIAL_FRONT_AMBIENT_MASK                     = $0000000c;
const   NV2A_COLOR_MATERIAL_FRONT_AMBIENT_OFF                     = $00000000;
const   NV2A_COLOR_MATERIAL_FRONT_AMBIENT_COL1                    = $00000004;
const   NV2A_COLOR_MATERIAL_FRONT_AMBIENT_COL2                    = $00000008;
const  NV2A_COLOR_MATERIAL_FRONT_DIFFUSE_SHIFT                    = 4;
const  NV2A_COLOR_MATERIAL_FRONT_DIFFUSE_MASK                     = $00000030;
const   NV2A_COLOR_MATERIAL_FRONT_DIFFUSE_OFF                     = $00000000;
const   NV2A_COLOR_MATERIAL_FRONT_DIFFUSE_COL1                    = $00000010;
const   NV2A_COLOR_MATERIAL_FRONT_DIFFUSE_COL2                    = $00000020;
const  NV2A_COLOR_MATERIAL_FRONT_SPECULAR_SHIFT                   = 6;
const  NV2A_COLOR_MATERIAL_FRONT_SPECULAR_MASK                    = $000000c0;
const   NV2A_COLOR_MATERIAL_FRONT_SPECULAR_OFF                    = $00000000;
const   NV2A_COLOR_MATERIAL_FRONT_SPECULAR_COL1                   = $00000040;
const   NV2A_COLOR_MATERIAL_FRONT_SPECULAR_COL2                   = $00000080;
const  NV2A_COLOR_MATERIAL_BACK_EMISSION_SHIFT                    = 8;
const  NV2A_COLOR_MATERIAL_BACK_EMISSION_MASK                     = $00000300;
const   NV2A_COLOR_MATERIAL_BACK_EMISSION_OFF                     = $00000000;
const   NV2A_COLOR_MATERIAL_BACK_EMISSION_COL1                    = $00000100;
const   NV2A_COLOR_MATERIAL_BACK_EMISSION_COL2                    = $00000200;
const  NV2A_COLOR_MATERIAL_BACK_AMBIENT_SHIFT                     = 10;
const  NV2A_COLOR_MATERIAL_BACK_AMBIENT_MASK                      = $00000c00;
const   NV2A_COLOR_MATERIAL_BACK_AMBIENT_OFF                      = $00000000;
const   NV2A_COLOR_MATERIAL_BACK_AMBIENT_COL1                     = $00000400;
const   NV2A_COLOR_MATERIAL_BACK_AMBIENT_COL2                     = $00000800;
const  NV2A_COLOR_MATERIAL_BACK_DIFFUSE_SHIFT                     = 12;
const  NV2A_COLOR_MATERIAL_BACK_DIFFUSE_MASK                      = $00003000;
const   NV2A_COLOR_MATERIAL_BACK_DIFFUSE_OFF                      = $00000000;
const   NV2A_COLOR_MATERIAL_BACK_DIFFUSE_COL1                     = $00001000;
const   NV2A_COLOR_MATERIAL_BACK_DIFFUSE_COL2                     = $00002000;
const  NV2A_COLOR_MATERIAL_BACK_SPECULAR_SHIFT                    = 14;
const  NV2A_COLOR_MATERIAL_BACK_SPECULAR_MASK                     = $0000c000;
const   NV2A_COLOR_MATERIAL_BACK_SPECULAR_OFF                     = $00000000;
const   NV2A_COLOR_MATERIAL_BACK_SPECULAR_COL1                    = $00004000;
const   NV2A_COLOR_MATERIAL_BACK_SPECULAR_COL2                    = $00008000;
const NV2A_FOG_MODE                                               = $0000029c;
const  NV2A_FOG_MODE_LINEAR_UNSIGNED                              = $00000804;
const  NV2A_FOG_MODE_LINEAR_SIGNED                                = $00002601;
const  NV2A_FOG_MODE_EXP_UNSIGNED                                 = $00000802;
const  NV2A_FOG_MODE_EXP_SIGNED                                   = $00000800;
const  NV2A_FOG_MODE_EXP2_UNSIGNED                                = $00000803;
const  NV2A_FOG_MODE_EXP2_SIGNED                                  = $00000801;
const NV2A_FOG_COORD                                              = $000002a0;
const  NV2A_FOG_COORD_DIST_RADIAL                                 = $00000001;
const  NV2A_FOG_COORD_DIST_ORTHOGONAL                             = $00000002;
const  NV2A_FOG_COORD_DIST_ORTHOGONAL_ABS                         = $00000003;
const  NV2A_FOG_COORD_FOG                                         = $00000006;
const NV2A_FOG_ENABLE                                             = $000002a4;
const NV2A_FOG_COLOR                                              = $000002a8;
const  NV2A_FOG_COLOR_R_SHIFT                                     = 0;
const  NV2A_FOG_COLOR_R_MASK                                      = $000000ff;
const  NV2A_FOG_COLOR_G_SHIFT                                     = 8;
const  NV2A_FOG_COLOR_G_MASK                                      = $0000ff00;
const  NV2A_FOG_COLOR_B_SHIFT                                     = 16;
const  NV2A_FOG_COLOR_B_MASK                                      = $00ff0000;
const  NV2A_FOG_COLOR_A_SHIFT                                     = 24;
const  NV2A_FOG_COLOR_A_MASK                                      = $ff000000;
const NV2A_VIEWPORT_CLIP_MODE                                     = $000002b4;
//const NV2A_VIEWPORT_CLIP_HORIZ(x)                               = ($000002c0+((x)*4));
const NV2A_VIEWPORT_CLIP_HORIZ__0                                 = ($000002c0+((0)*4)); // Dxbx
const NV2A_VIEWPORT_CLIP_HORIZ__SIZE                              = $00000008;
//const NV2A_VIEWPORT_CLIP_VERT(x)                                = ($000002e0+((x)*4));
const NV2A_VIEWPORT_CLIP_VERT__SIZE                               = $00000008;
const NV2A_ALPHA_FUNC_ENABLE                                      = $00000300;
const NV2A_BLEND_FUNC_ENABLE                                      = $00000304;
const NV2A_CULL_FACE_ENABLE                                       = $00000308;
const NV2A_DEPTH_TEST_ENABLE                                      = $0000030c;
const NV2A_DITHER_ENABLE                                          = $00000310;
const NV2A_LIGHTING_ENABLE                                        = $00000314;
const NV2A_POINT_PARAMETERS_ENABLE                                = $00000318;
const NV2A_POINT_SMOOTH_ENABLE                                    = $0000031c;
const NV2A_LINE_SMOOTH_ENABLE                                     = $00000320;
const NV2A_POLYGON_SMOOTH_ENABLE                                  = $00000324;
const NV2A_SKIN_MODE                                              = $00000328; // Dxbx
const NV2A_STENCIL_ENABLE                                         = $0000032c;
const NV2A_POLYGON_OFFSET_POINT_ENABLE                            = $00000330;
const NV2A_POLYGON_OFFSET_LINE_ENABLE                             = $00000334;
const NV2A_POLYGON_OFFSET_FILL_ENABLE                             = $00000338;
const NV2A_ALPHA_FUNC_FUNC                                        = $0000033c;
const  NV2A_ALPHA_FUNC_FUNC_NEVER                                 = $00000200;
const  NV2A_ALPHA_FUNC_FUNC_LESS                                  = $00000201;
const  NV2A_ALPHA_FUNC_FUNC_EQUAL                                 = $00000202;
const  NV2A_ALPHA_FUNC_FUNC_LEQUAL                                = $00000203;
const  NV2A_ALPHA_FUNC_FUNC_GREATER                               = $00000204;
const  NV2A_ALPHA_FUNC_FUNC_NOTEQUAL                              = $00000205;
const  NV2A_ALPHA_FUNC_FUNC_GEQUAL                                = $00000206;
const  NV2A_ALPHA_FUNC_FUNC_ALWAYS                                = $00000207;
const NV2A_ALPHA_FUNC_REF                                         = $00000340;
const NV2A_BLEND_FUNC_SRC                                         = $00000344;
const  NV2A_BLEND_FUNC_SRC_ZERO                                   = $00000000;
const  NV2A_BLEND_FUNC_SRC_ONE                                    = $00000001;
const  NV2A_BLEND_FUNC_SRC_SRC_COLOR                              = $00000300;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_SRC_COLOR                    = $00000301;
const  NV2A_BLEND_FUNC_SRC_SRC_ALPHA                              = $00000302;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_SRC_ALPHA                    = $00000303;
const  NV2A_BLEND_FUNC_SRC_DST_ALPHA                              = $00000304;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_DST_ALPHA                    = $00000305;
const  NV2A_BLEND_FUNC_SRC_DST_COLOR                              = $00000306;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_DST_COLOR                    = $00000307;
const  NV2A_BLEND_FUNC_SRC_SRC_ALPHA_SATURATE                     = $00000308;
const  NV2A_BLEND_FUNC_SRC_CONSTANT_COLOR                         = $00008001;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_CONSTANT_COLOR               = $00008002;
const  NV2A_BLEND_FUNC_SRC_CONSTANT_ALPHA                         = $00008003;
const  NV2A_BLEND_FUNC_SRC_ONE_MINUS_CONSTANT_ALPHA               = $00008004;
const NV2A_BLEND_FUNC_DST                                         = $00000348;
const  NV2A_BLEND_FUNC_DST_ZERO                                   = $00000000;
const  NV2A_BLEND_FUNC_DST_ONE                                    = $00000001;
const  NV2A_BLEND_FUNC_DST_SRC_COLOR                              = $00000300;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_SRC_COLOR                    = $00000301;
const  NV2A_BLEND_FUNC_DST_SRC_ALPHA                              = $00000302;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_SRC_ALPHA                    = $00000303;
const  NV2A_BLEND_FUNC_DST_DST_ALPHA                              = $00000304;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_DST_ALPHA                    = $00000305;
const  NV2A_BLEND_FUNC_DST_DST_COLOR                              = $00000306;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_DST_COLOR                    = $00000307;
const  NV2A_BLEND_FUNC_DST_SRC_ALPHA_SATURATE                     = $00000308;
const  NV2A_BLEND_FUNC_DST_CONSTANT_COLOR                         = $00008001;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_CONSTANT_COLOR               = $00008002;
const  NV2A_BLEND_FUNC_DST_CONSTANT_ALPHA                         = $00008003;
const  NV2A_BLEND_FUNC_DST_ONE_MINUS_CONSTANT_ALPHA               = $00008004;
const NV2A_BLEND_COLOR                                            = $0000034c;
const  NV2A_BLEND_COLOR_B_SHIFT                                   = 0;
const  NV2A_BLEND_COLOR_B_MASK                                    = $000000ff;
const  NV2A_BLEND_COLOR_G_SHIFT                                   = 8;
const  NV2A_BLEND_COLOR_G_MASK                                    = $0000ff00;
const  NV2A_BLEND_COLOR_R_SHIFT                                   = 16;
const  NV2A_BLEND_COLOR_R_MASK                                    = $00ff0000;
const  NV2A_BLEND_COLOR_A_SHIFT                                   = 24;
const  NV2A_BLEND_COLOR_A_MASK                                    = $ff000000;
const NV2A_BLEND_EQUATION                                         = $00000350;
const  NV2A_BLEND_EQUATION_FUNC_ADD                               = $00008006;
const  NV2A_BLEND_EQUATION_MIN                                    = $00008007;
const  NV2A_BLEND_EQUATION_MAX                                    = $00008008;
const  NV2A_BLEND_EQUATION_FUNC_SUBTRACT                          = $0000800a;
const  NV2A_BLEND_EQUATION_FUNC_REVERSE_SUBTRACT                  = $0000800b;
const NV2A_DEPTH_FUNC                                             = $00000354;
const  NV2A_DEPTH_FUNC_NEVER                                      = $00000200;
const  NV2A_DEPTH_FUNC_LESS                                       = $00000201;
const  NV2A_DEPTH_FUNC_EQUAL                                      = $00000202;
const  NV2A_DEPTH_FUNC_LEQUAL                                     = $00000203;
const  NV2A_DEPTH_FUNC_GREATER                                    = $00000204;
const  NV2A_DEPTH_FUNC_NOTEQUAL                                   = $00000205;
const  NV2A_DEPTH_FUNC_GEQUAL                                     = $00000206;
const  NV2A_DEPTH_FUNC_ALWAYS                                     = $00000207;
const NV2A_COLOR_MASK                                             = $00000358;
const  NV2A_COLOR_MASK_B                                          = (1 shl  0);
const  NV2A_COLOR_MASK_G                                          = (1 shl  8);
const  NV2A_COLOR_MASK_R                                          = (1 shl 16);
const  NV2A_COLOR_MASK_A                                          = (1 shl 24);
const NV2A_DEPTH_WRITE_ENABLE                                     = $0000035c;
const NV2A_STENCIL_MASK                                           = $00000360;
const NV2A_STENCIL_FUNC_FUNC                                      = $00000364;
const  NV2A_STENCIL_FUNC_FUNC_NEVER                               = $00000200;
const  NV2A_STENCIL_FUNC_FUNC_LESS                                = $00000201;
const  NV2A_STENCIL_FUNC_FUNC_EQUAL                               = $00000202;
const  NV2A_STENCIL_FUNC_FUNC_LEQUAL                              = $00000203;
const  NV2A_STENCIL_FUNC_FUNC_GREATER                             = $00000204;
const  NV2A_STENCIL_FUNC_FUNC_NOTEQUAL                            = $00000205;
const  NV2A_STENCIL_FUNC_FUNC_GEQUAL                              = $00000206;
const  NV2A_STENCIL_FUNC_FUNC_ALWAYS                              = $00000207;
const NV2A_STENCIL_FUNC_REF                                       = $00000368;
const NV2A_STENCIL_FUNC_MASK                                      = $0000036c;
const NV2A_STENCIL_OP_FAIL                                        = $00000370;
const  NV2A_STENCIL_OP_FAIL_ZERO                                  = $00000000;
const  NV2A_STENCIL_OP_FAIL_INVERT                                = $0000150a;
const  NV2A_STENCIL_OP_FAIL_KEEP                                  = $00001e00;
const  NV2A_STENCIL_OP_FAIL_REPLACE                               = $00001e01;
const  NV2A_STENCIL_OP_FAIL_INCR                                  = $00001e02;
const  NV2A_STENCIL_OP_FAIL_DECR                                  = $00001e03;
const  NV2A_STENCIL_OP_FAIL_INCR_WRAP                             = $00008507;
const  NV2A_STENCIL_OP_FAIL_DECR_WRAP                             = $00008508;
const NV2A_STENCIL_OP_ZFAIL                                       = $00000374;
const  NV2A_STENCIL_OP_ZFAIL_ZERO                                 = $00000000;
const  NV2A_STENCIL_OP_ZFAIL_INVERT                               = $0000150a;
const  NV2A_STENCIL_OP_ZFAIL_KEEP                                 = $00001e00;
const  NV2A_STENCIL_OP_ZFAIL_REPLACE                              = $00001e01;
const  NV2A_STENCIL_OP_ZFAIL_INCR                                 = $00001e02;
const  NV2A_STENCIL_OP_ZFAIL_DECR                                 = $00001e03;
const  NV2A_STENCIL_OP_ZFAIL_INCR_WRAP                            = $00008507;
const  NV2A_STENCIL_OP_ZFAIL_DECR_WRAP                            = $00008508;
const NV2A_STENCIL_OP_ZPASS                                       = $00000378;
const  NV2A_STENCIL_OP_ZPASS_ZERO                                 = $00000000;
const  NV2A_STENCIL_OP_ZPASS_INVERT                               = $0000150a;
const  NV2A_STENCIL_OP_ZPASS_KEEP                                 = $00001e00;
const  NV2A_STENCIL_OP_ZPASS_REPLACE                              = $00001e01;
const  NV2A_STENCIL_OP_ZPASS_INCR                                 = $00001e02;
const  NV2A_STENCIL_OP_ZPASS_DECR                                 = $00001e03;
const  NV2A_STENCIL_OP_ZPASS_INCR_WRAP                            = $00008507;
const  NV2A_STENCIL_OP_ZPASS_DECR_WRAP                            = $00008508;
const NV2A_SHADE_MODEL                                            = $0000037c;
const  NV2A_SHADE_MODEL_FLAT                                      = $00001d00;
const  NV2A_SHADE_MODEL_SMOOTH                                    = $00001d01;
const NV2A_LINE_WIDTH                                             = $00000380;
const NV2A_POLYGON_OFFSET_FACTOR                                  = $00000384;
const NV2A_POLYGON_OFFSET_UNITS                                   = $00000388;
const NV2A_POLYGON_MODE_FRONT                                     = $0000038c;
const  NV2A_POLYGON_MODE_FRONT_POINT                              = $00001b00;
const  NV2A_POLYGON_MODE_FRONT_LINE                               = $00001b01;
const  NV2A_POLYGON_MODE_FRONT_FILL                               = $00001b02;
const NV2A_POLYGON_MODE_BACK                                      = $00000390;
const  NV2A_POLYGON_MODE_BACK_POINT                               = $00001b00;
const  NV2A_POLYGON_MODE_BACK_LINE                                = $00001b01;
const  NV2A_POLYGON_MODE_BACK_FILL                                = $00001b02;
const NV2A_DEPTH_RANGE_NEAR                                       = $00000394;
const NV2A_DEPTH_RANGE_FAR                                        = $00000398;
const NV2A_CULL_FACE                                              = $0000039c;
const  NV2A_CULL_FACE_FRONT                                       = $00000404;
const  NV2A_CULL_FACE_BACK                                        = $00000405;
const  NV2A_CULL_FACE_FRONT_AND_BACK                              = $00000408;
const NV2A_FRONT_FACE                                             = $000003a0;
const  NV2A_FRONT_FACE_CW                                         = $00000900;
const  NV2A_FRONT_FACE_CCW                                        = $00000901;
const NV2A_NORMALIZE_ENABLE                                       = $000003a4;
const NV2A_MATERIAL_FACTOR_FRONT_R                                = $000003a8;
const NV2A_MATERIAL_FACTOR_FRONT_G                                = $000003ac;
const NV2A_MATERIAL_FACTOR_FRONT_B                                = $000003b0;
const NV2A_MATERIAL_FACTOR_FRONT_A                                = $000003b4;
const NV2A_SEPARATE_SPECULAR_ENABLE                               = $000003b8;
const NV2A_ENABLED_LIGHTS                                         = $000003bc;
const  NV2A_ENABLED_LIGHTS_0_SHIFT                                = 0;
const  NV2A_ENABLED_LIGHTS_0_MASK                                 = $00000003;
const   NV2A_ENABLED_LIGHTS_0_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_0_NONPOSITIONAL                       = $00000001;
const   NV2A_ENABLED_LIGHTS_0_POSITIONAL                          = $00000002;
const   NV2A_ENABLED_LIGHTS_0_DIRECTIONAL                         = $00000003;
const  NV2A_ENABLED_LIGHTS_1_SHIFT                                = 2;
const  NV2A_ENABLED_LIGHTS_1_MASK                                 = $0000000c;
const   NV2A_ENABLED_LIGHTS_1_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_1_NONPOSITIONAL                       = $00000004;
const   NV2A_ENABLED_LIGHTS_1_POSITIONAL                          = $00000008;
const   NV2A_ENABLED_LIGHTS_1_DIRECTIONAL                         = $0000000c;
const  NV2A_ENABLED_LIGHTS_2_SHIFT                                = 4;
const  NV2A_ENABLED_LIGHTS_2_MASK                                 = $00000030;
const   NV2A_ENABLED_LIGHTS_2_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_2_NONPOSITIONAL                       = $00000010;
const   NV2A_ENABLED_LIGHTS_2_POSITIONAL                          = $00000020;
const   NV2A_ENABLED_LIGHTS_2_DIRECTIONAL                         = $00000030;
const  NV2A_ENABLED_LIGHTS_3_SHIFT                                = 6;
const  NV2A_ENABLED_LIGHTS_3_MASK                                 = $000000c0;
const   NV2A_ENABLED_LIGHTS_3_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_3_NONPOSITIONAL                       = $00000040;
const   NV2A_ENABLED_LIGHTS_3_POSITIONAL                          = $00000080;
const   NV2A_ENABLED_LIGHTS_3_DIRECTIONAL                         = $000000c0;
const  NV2A_ENABLED_LIGHTS_4_SHIFT                                = 8;
const  NV2A_ENABLED_LIGHTS_4_MASK                                 = $00000300;
const   NV2A_ENABLED_LIGHTS_4_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_4_NONPOSITIONAL                       = $00000100;
const   NV2A_ENABLED_LIGHTS_4_POSITIONAL                          = $00000200;
const   NV2A_ENABLED_LIGHTS_4_DIRECTIONAL                         = $00000300;
const  NV2A_ENABLED_LIGHTS_5_SHIFT                                = 10;
const  NV2A_ENABLED_LIGHTS_5_MASK                                 = $00000c00;
const   NV2A_ENABLED_LIGHTS_5_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_5_NONPOSITIONAL                       = $00000400;
const   NV2A_ENABLED_LIGHTS_5_POSITIONAL                          = $00000800;
const   NV2A_ENABLED_LIGHTS_5_DIRECTIONAL                         = $00000c00;
const  NV2A_ENABLED_LIGHTS_6_SHIFT                                = 12;
const  NV2A_ENABLED_LIGHTS_6_MASK                                 = $00003000;
const   NV2A_ENABLED_LIGHTS_6_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_6_NONPOSITIONAL                       = $00001000;
const   NV2A_ENABLED_LIGHTS_6_POSITIONAL                          = $00002000;
const   NV2A_ENABLED_LIGHTS_6_DIRECTIONAL                         = $00003000;
const  NV2A_ENABLED_LIGHTS_7_SHIFT                                = 14;
const  NV2A_ENABLED_LIGHTS_7_MASK                                 = $0000c000;
const   NV2A_ENABLED_LIGHTS_7_DISABLED                            = $00000000;
const   NV2A_ENABLED_LIGHTS_7_NONPOSITIONAL                       = $00004000;
const   NV2A_ENABLED_LIGHTS_7_POSITIONAL                          = $00008000;
const   NV2A_ENABLED_LIGHTS_7_DIRECTIONAL                         = $0000c000;
//const NV2A_TX_GEN_MODE_S(x)                                     = ($000003c0+((x)*16));
const NV2A_TX_GEN_MODE_S__SIZE                                    = $00000004;
const  NV2A_TX_GEN_MODE_S_FALSE                                   = $00000000;
const  NV2A_TX_GEN_MODE_S_EYE_LINEAR                              = $00002400;
const  NV2A_TX_GEN_MODE_S_OBJECT_LINEAR                           = $00002401;
const  NV2A_TX_GEN_MODE_S_SPHERE_MAP                              = $00002402;
const  NV2A_TX_GEN_MODE_S_NORMAL_MAP                              = $00008511;
const  NV2A_TX_GEN_MODE_S_REFLECTION_MAP                          = $00008512;
//const NV2A_TX_GEN_MODE_T(x)                                     = ($000003c4+((x)*16));
const NV2A_TX_GEN_MODE_T__SIZE                                    = $00000004;
const  NV2A_TX_GEN_MODE_T_FALSE                                   = $00000000;
const  NV2A_TX_GEN_MODE_T_EYE_LINEAR                              = $00002400;
const  NV2A_TX_GEN_MODE_T_OBJECT_LINEAR                           = $00002401;
const  NV2A_TX_GEN_MODE_T_SPHERE_MAP                              = $00002402;
const  NV2A_TX_GEN_MODE_T_NORMAL_MAP                              = $00008511;
const  NV2A_TX_GEN_MODE_T_REFLECTION_MAP                          = $00008512;
//const NV2A_TX_GEN_MODE_R(x)                                     = ($000003c8+((x)*16));
const NV2A_TX_GEN_MODE_R__SIZE                                    = $00000004;
const  NV2A_TX_GEN_MODE_R_FALSE                                   = $00000000;
const  NV2A_TX_GEN_MODE_R_EYE_LINEAR                              = $00002400;
const  NV2A_TX_GEN_MODE_R_OBJECT_LINEAR                           = $00002401;
const  NV2A_TX_GEN_MODE_R_SPHERE_MAP                              = $00002402;
const  NV2A_TX_GEN_MODE_R_NORMAL_MAP                              = $00008511;
const  NV2A_TX_GEN_MODE_R_REFLECTION_MAP                          = $00008512;
//const NV2A_TX_GEN_MODE_Q(x)                                     = ($000003cc+((x)*16));
const NV2A_TX_GEN_MODE_Q__SIZE                                    = $00000004;
const  NV2A_TX_GEN_MODE_Q_FALSE                                   = $00000000;
const  NV2A_TX_GEN_MODE_Q_EYE_LINEAR                              = $00002400;
const  NV2A_TX_GEN_MODE_Q_OBJECT_LINEAR                           = $00002401;
const  NV2A_TX_GEN_MODE_Q_SPHERE_MAP                              = $00002402;
const  NV2A_TX_GEN_MODE_Q_NORMAL_MAP                              = $00008511;
const  NV2A_TX_GEN_MODE_Q_REFLECTION_MAP                          = $00008512;
//const NV2A_TX_MATRIX_ENABLE(x)                                  = ($00000420+((x)*4));
const NV2A_TX_MATRIX_ENABLE__0                                    = ($00000420+((0)*4)); // Dxbx
const NV2A_TX_MATRIX_ENABLE__SIZE                                 = $00000004;
const NV2A_POINT_SIZE                                             = $0000043c;
//const NV2A_PROJECTION_MATRIX(x)                                 = ($00000440+((x)*4)); // Dxbx
const NV2A_PROJECTION_MATRIX__0                                   = ($00000440+((0)*4)); // Dxbx
const NV2A_PROJECTION_MATRIX__SIZE                                = $00000010; // Dxbx
//const NV2A_MODELVIEW0_MATRIX(x)                                 = ($00000480+((x)*4));
const NV2A_MODELVIEW0_MATRIX__0                                   = ($00000480+((0)*4));
const NV2A_MODELVIEW0_MATRIX__SIZE                                = $00000010;
//const NV2A_MODELVIEW1_MATRIX(x)                                 = ($000004c0+((x)*4));
const NV2A_MODELVIEW1_MATRIX__SIZE                                = $00000010;
//const NV2A_MODELVIEW2_MATRIX(x)                                 = ($00000500+((x)*4));
const NV2A_MODELVIEW2_MATRIX__SIZE                                = $00000010;
//const NV2A_MODELVIEW3_MATRIX(x)                                 = ($00000540+((x)*4));
const NV2A_MODELVIEW3_MATRIX__SIZE                                = $00000010;
//const NV2A_INVERSE_MODELVIEW0_MATRIX(x)                         = ($00000580+((x)*4));
const NV2A_INVERSE_MODELVIEW0_MATRIX__SIZE                        = $00000010;
//const NV2A_INVERSE_MODELVIEW1_MATRIX(x)                         = ($000005c0+((x)*4));
const NV2A_INVERSE_MODELVIEW1_MATRIX__SIZE                        = $00000010;
//const NV2A_INVERSE_MODELVIEW2_MATRIX(x)                         = ($00000600+((x)*4));
const NV2A_INVERSE_MODELVIEW2_MATRIX__SIZE                        = $00000010;
//const NV2A_INVERSE_MODELVIEW3_MATRIX(x)                         = ($00000640+((x)*4));
const NV2A_INVERSE_MODELVIEW3_MATRIX__SIZE                        = $00000010;
//const NV2A_COMPOSITE_MATRIX(x)                                  = ($00000680+((x)*4)); // Dxbx
const NV2A_COMPOSITE_MATRIX__0                                    = ($00000680+((0)*4)); // Dxbx
const NV2A_COMPOSITE_MATRIX__SIZE                                 = $00000010; // Dxbx
//const NV2A_TX0_MATRIX(x)                                        = ($000006c0+((x)*4));
const NV2A_TX0_MATRIX__SIZE                                       = $00000010;
//const NV2A_TX1_MATRIX(x)                                        = ($00000700+((x)*4));
const NV2A_TX1_MATRIX__SIZE                                       = $00000010;
//const NV2A_TX2_MATRIX(x)                                        = ($00000740+((x)*4));
const NV2A_TX2_MATRIX__SIZE                                       = $00000010;
//const NV2A_TX3_MATRIX(x)                                        = ($00000780+((x)*4));
const NV2A_TX3_MATRIX__SIZE                                       = $00000010;
//const NV2A_TX_GEN_COEFF_S_A(x)                                  = ($00000840+((x)*64));
const NV2A_TX_GEN_COEFF_S_A__0                                    = ($00000840+((0)*64)); // Dxbx
const NV2A_TX_GEN_COEFF_S_A__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_S_B(x)                                  = ($00000844+((x)*64));
const NV2A_TX_GEN_COEFF_S_B__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_S_C(x)                                  = ($00000848+((x)*64));
const NV2A_TX_GEN_COEFF_S_C__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_S_D(x)                                  = ($0000084c+((x)*64));
const NV2A_TX_GEN_COEFF_S_D__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_T_A(x)                                  = ($00000850+((x)*64));
const NV2A_TX_GEN_COEFF_T_A__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_T_B(x)                                  = ($00000854+((x)*64));
const NV2A_TX_GEN_COEFF_T_B__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_T_C(x)                                  = ($00000858+((x)*64));
const NV2A_TX_GEN_COEFF_T_C__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_T_D(x)                                  = ($0000085c+((x)*64));
const NV2A_TX_GEN_COEFF_T_D__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_R_A(x)                                  = ($00000860+((x)*64));
const NV2A_TX_GEN_COEFF_R_A__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_R_B(x)                                  = ($00000864+((x)*64));
const NV2A_TX_GEN_COEFF_R_B__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_R_C(x)                                  = ($00000868+((x)*64));
const NV2A_TX_GEN_COEFF_R_C__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_R_D(x)                                  = ($0000086c+((x)*64));
const NV2A_TX_GEN_COEFF_R_D__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_Q_A(x)                                  = ($00000870+((x)*64));
const NV2A_TX_GEN_COEFF_Q_A__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_Q_B(x)                                  = ($00000874+((x)*64));
const NV2A_TX_GEN_COEFF_Q_B__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_Q_C(x)                                  = ($00000878+((x)*64));
const NV2A_TX_GEN_COEFF_Q_C__SIZE                                 = $00000004;
//const NV2A_TX_GEN_COEFF_Q_D(x)                                  = ($0000087c+((x)*64));
const NV2A_TX_GEN_COEFF_Q_D__SIZE                                 = $00000004;
const NV2A_FOG_EQUATION_CONSTANT                                  = $000009c0;
const NV2A_FOG_EQUATION_LINEAR                                    = $000009c4;
const NV2A_FOG_EQUATION_QUADRATIC                                 = $000009c8;
//const NV2A_FOG_PLANE(x)                                         = ($000009d0+((x)*4));
const NV2A_FOG_PLANE__0                                           = ($000009d0+((0)*4)); // Dxbx
const NV2A_FOG_PLANE__SIZE                                        = $00000004; // Dxbx
//const NV2A_FRONT_MATERIAL_SHININESS(x)                          = ($000009e0+((x)*4));
const NV2A_FRONT_MATERIAL_SHININESS__SIZE                         = $00000006;
const NV2A_SWATH_WIDTH                                            = $000009f8; // Dxbx
const NV2A_FLAT_SHADE_OP                                          = $000009fc; // Dxbx
const NV2A_LIGHT_MODEL_FRONT_AMBIENT_R                            = $00000a10;
const NV2A_LIGHT_MODEL_FRONT_AMBIENT_G                            = $00000a14;
const NV2A_LIGHT_MODEL_FRONT_AMBIENT_B                            = $00000a18;
const NV2A_VIEWPORT_TRANSLATE_X                                   = $00000a20;
const NV2A_VIEWPORT_TRANSLATE_Y                                   = $00000a24;
const NV2A_VIEWPORT_TRANSLATE_Z                                   = $00000a28;
const NV2A_VIEWPORT_TRANSLATE_W                                   = $00000a2c;
//const NV2A_POINT_PARAMETER(x)                                   = ($00000a30+((x)*4));
const NV2A_POINT_PARAMETER__0                                     = ($00000a30+((0)*4)); // Dxbx
const NV2A_POINT_PARAMETER__SIZE                                  = $00000008;
//const NV2A_EYE_POSITION(x)                                      = ($00000a50+((x)*4)); // Dxbx
const NV2A_EYE_POSITION__0                                        = ($00000a50+((0)*4)); // Dxbx
const NV2A_EYE_POSITION__3                                        = ($00000a50+((3)*4)); // Dxbx
const NV2A_EYE_POSITION__SIZE                                     = $00000004; // Dxbx
//const NV2A_RC_CONSTANT_COLOR0(x)                                = ($00000a60+((x)*4));
const NV2A_RC_CONSTANT_COLOR0__0                                  = ($00000a60+((0)*4)); // Dxbx
const NV2A_RC_CONSTANT_COLOR0__7                                  = ($00000a60+((7)*4)); // Dxbx
const NV2A_RC_CONSTANT_COLOR0__SIZE                               = $00000008;
const  NV2A_RC_CONSTANT_COLOR0_B_SHIFT                            = 0;
const  NV2A_RC_CONSTANT_COLOR0_B_MASK                             = $000000ff;
const  NV2A_RC_CONSTANT_COLOR0_G_SHIFT                            = 8;
const  NV2A_RC_CONSTANT_COLOR0_G_MASK                             = $0000ff00;
const  NV2A_RC_CONSTANT_COLOR0_R_SHIFT                            = 16;
const  NV2A_RC_CONSTANT_COLOR0_R_MASK                             = $00ff0000;
const  NV2A_RC_CONSTANT_COLOR0_A_SHIFT                            = 24;
const  NV2A_RC_CONSTANT_COLOR0_A_MASK                             = $ff000000;
//const NV2A_RC_CONSTANT_COLOR1(x)                                = ($00000a80+((x)*4));
const NV2A_RC_CONSTANT_COLOR1__SIZE                               = $00000008;
const  NV2A_RC_CONSTANT_COLOR1_B_SHIFT                            = 0;
const  NV2A_RC_CONSTANT_COLOR1_B_MASK                             = $000000ff;
const  NV2A_RC_CONSTANT_COLOR1_G_SHIFT                            = 8;
const  NV2A_RC_CONSTANT_COLOR1_G_MASK                             = $0000ff00;
const  NV2A_RC_CONSTANT_COLOR1_R_SHIFT                            = 16;
const  NV2A_RC_CONSTANT_COLOR1_R_MASK                             = $00ff0000;
const  NV2A_RC_CONSTANT_COLOR1_A_SHIFT                            = 24;
const  NV2A_RC_CONSTANT_COLOR1_A_MASK                             = $ff000000;
//const NV2A_RC_OUT_ALPHA(x)                                      = ($00000aa0+((x)*4));
const NV2A_RC_OUT_ALPHA__SIZE                                     = $00000008;
const  NV2A_RC_OUT_ALPHA_CD_OUTPUT_SHIFT                          = 0;
const  NV2A_RC_OUT_ALPHA_CD_OUTPUT_MASK                           = $0000000f;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_ZERO                          = $00000000;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_CONSTANT_COLOR0               = $00000001;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_CONSTANT_COLOR1               = $00000002;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_FOG                           = $00000003;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_PRIMARY_COLOR                 = $00000004;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_SECONDARY_COLOR               = $00000005;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_TEXTURE0                      = $00000008;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_TEXTURE1                      = $00000009;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_SPARE0                        = $0000000c;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_SPARE1                        = $0000000d;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR   = $0000000e;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_E_TIMES_F                     = $0000000f;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_TEXTURE2                      = $0000000a;
const   NV2A_RC_OUT_ALPHA_CD_OUTPUT_TEXTURE3                      = $0000000b;
const  NV2A_RC_OUT_ALPHA_AB_OUTPUT_SHIFT                          = 4;
const  NV2A_RC_OUT_ALPHA_AB_OUTPUT_MASK                           = $000000f0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_ZERO                          = $00000000;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_CONSTANT_COLOR0               = $00000010;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_CONSTANT_COLOR1               = $00000020;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_FOG                           = $00000030;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_PRIMARY_COLOR                 = $00000040;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_SECONDARY_COLOR               = $00000050;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_TEXTURE0                      = $00000080;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_TEXTURE1                      = $00000090;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_SPARE0                        = $000000c0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_SPARE1                        = $000000d0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR   = $000000e0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_E_TIMES_F                     = $000000f0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_TEXTURE2                      = $000000a0;
const   NV2A_RC_OUT_ALPHA_AB_OUTPUT_TEXTURE3                      = $000000b0;
const  NV2A_RC_OUT_ALPHA_SUM_OUTPUT_SHIFT                         = 8;
const  NV2A_RC_OUT_ALPHA_SUM_OUTPUT_MASK                          = $00000f00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_ZERO                         = $00000000;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_CONSTANT_COLOR0              = $00000100;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_CONSTANT_COLOR1              = $00000200;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_FOG                          = $00000300;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_PRIMARY_COLOR                = $00000400;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_SECONDARY_COLOR              = $00000500;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_TEXTURE0                     = $00000800;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_TEXTURE1                     = $00000900;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_SPARE0                       = $00000c00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_SPARE1                       = $00000d00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR  = $00000e00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_E_TIMES_F                    = $00000f00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_TEXTURE2                     = $00000a00;
const   NV2A_RC_OUT_ALPHA_SUM_OUTPUT_TEXTURE3                     = $00000b00;
const  NV2A_RC_OUT_ALPHA_CD_DOT_PRODUCT                           = (1 shl 12);
const  NV2A_RC_OUT_ALPHA_AB_DOT_PRODUCT                           = (1 shl 13);
const  NV2A_RC_OUT_ALPHA_MUX_SUM                                  = (1 shl 14);
const  NV2A_RC_OUT_ALPHA_BIAS                                     = (1 shl 15);
const   NV2A_RC_OUT_ALPHA_BIAS_NONE                               = $00000000;
const   NV2A_RC_OUT_ALPHA_BIAS_BIAS_BY_NEGATIVE_ONE_HALF          = $00008000;
const  NV2A_RC_OUT_ALPHA_SCALE_SHIFT                              = 16;
const  NV2A_RC_OUT_ALPHA_SCALE_MASK                               = $00030000;
const   NV2A_RC_OUT_ALPHA_SCALE_NONE                              = $00000000;
const   NV2A_RC_OUT_ALPHA_SCALE_SCALE_BY_TWO                      = $00010000;
const   NV2A_RC_OUT_ALPHA_SCALE_SCALE_BY_FOUR                     = $00020000;
const   NV2A_RC_OUT_ALPHA_SCALE_SCALE_BY_ONE_HALF                 = $00030000;
//const NV2A_RC_IN_RGB(x)                                         = ($00000ac0+((x)*4));
const NV2A_RC_IN_RGB__SIZE                                        = $00000008;
const  NV2A_RC_IN_RGB_D_INPUT_SHIFT                               = 0;
const  NV2A_RC_IN_RGB_D_INPUT_MASK                                = $0000000f;
const   NV2A_RC_IN_RGB_D_INPUT_ZERO                               = $00000000;
const   NV2A_RC_IN_RGB_D_INPUT_CONSTANT_COLOR0                    = $00000001;
const   NV2A_RC_IN_RGB_D_INPUT_CONSTANT_COLOR1                    = $00000002;
const   NV2A_RC_IN_RGB_D_INPUT_FOG                                = $00000003;
const   NV2A_RC_IN_RGB_D_INPUT_PRIMARY_COLOR                      = $00000004;
const   NV2A_RC_IN_RGB_D_INPUT_SECONDARY_COLOR                    = $00000005;
const   NV2A_RC_IN_RGB_D_INPUT_TEXTURE0                           = $00000008;
const   NV2A_RC_IN_RGB_D_INPUT_TEXTURE1                           = $00000009;
const   NV2A_RC_IN_RGB_D_INPUT_SPARE0                             = $0000000c;
const   NV2A_RC_IN_RGB_D_INPUT_SPARE1                             = $0000000d;
const   NV2A_RC_IN_RGB_D_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $0000000e;
const   NV2A_RC_IN_RGB_D_INPUT_E_TIMES_F                          = $0000000f;
const   NV2A_RC_IN_RGB_D_INPUT_TEXTURE2                           = $0000000a;
const   NV2A_RC_IN_RGB_D_INPUT_TEXTURE3                           = $0000000b;
const  NV2A_RC_IN_RGB_D_COMPONENT_USAGE                           = (1 shl  4);
const   NV2A_RC_IN_RGB_D_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_IN_RGB_D_COMPONENT_USAGE_ALPHA                    = $00000010;
const  NV2A_RC_IN_RGB_D_MAPPING_SHIFT                             = 5;
const  NV2A_RC_IN_RGB_D_MAPPING_MASK                              = $000000e0;
const   NV2A_RC_IN_RGB_D_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_IN_RGB_D_MAPPING_UNSIGNED_INVERT                  = $00000020;
const   NV2A_RC_IN_RGB_D_MAPPING_EXPAND_NORMAL                    = $00000040;
const   NV2A_RC_IN_RGB_D_MAPPING_EXPAND_NEGATE                    = $00000060;
const   NV2A_RC_IN_RGB_D_MAPPING_HALF_BIAS_NORMAL                 = $00000080;
const   NV2A_RC_IN_RGB_D_MAPPING_HALF_BIAS_NEGATE                 = $000000a0;
const   NV2A_RC_IN_RGB_D_MAPPING_SIGNED_IDENTITY                  = $000000c0;
const   NV2A_RC_IN_RGB_D_MAPPING_SIGNED_NEGATE                    = $000000e0;
const  NV2A_RC_IN_RGB_C_INPUT_SHIFT                               = 8;
const  NV2A_RC_IN_RGB_C_INPUT_MASK                                = $00000f00;
const   NV2A_RC_IN_RGB_C_INPUT_ZERO                               = $00000000;
const   NV2A_RC_IN_RGB_C_INPUT_CONSTANT_COLOR0                    = $00000100;
const   NV2A_RC_IN_RGB_C_INPUT_CONSTANT_COLOR1                    = $00000200;
const   NV2A_RC_IN_RGB_C_INPUT_FOG                                = $00000300;
const   NV2A_RC_IN_RGB_C_INPUT_PRIMARY_COLOR                      = $00000400;
const   NV2A_RC_IN_RGB_C_INPUT_SECONDARY_COLOR                    = $00000500;
const   NV2A_RC_IN_RGB_C_INPUT_TEXTURE0                           = $00000800;
const   NV2A_RC_IN_RGB_C_INPUT_TEXTURE1                           = $00000900;
const   NV2A_RC_IN_RGB_C_INPUT_SPARE0                             = $00000c00;
const   NV2A_RC_IN_RGB_C_INPUT_SPARE1                             = $00000d00;
const   NV2A_RC_IN_RGB_C_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $00000e00;
const   NV2A_RC_IN_RGB_C_INPUT_E_TIMES_F                          = $00000f00;
const   NV2A_RC_IN_RGB_C_INPUT_TEXTURE2                           = $00000a00;
const   NV2A_RC_IN_RGB_C_INPUT_TEXTURE3                           = $00000b00;
const  NV2A_RC_IN_RGB_C_COMPONENT_USAGE                           = (1 shl 12);
const   NV2A_RC_IN_RGB_C_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_IN_RGB_C_COMPONENT_USAGE_ALPHA                    = $00001000;
const  NV2A_RC_IN_RGB_C_MAPPING_SHIFT                             = 13;
const  NV2A_RC_IN_RGB_C_MAPPING_MASK                              = $0000e000;
const   NV2A_RC_IN_RGB_C_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_IN_RGB_C_MAPPING_UNSIGNED_INVERT                  = $00002000;
const   NV2A_RC_IN_RGB_C_MAPPING_EXPAND_NORMAL                    = $00004000;
const   NV2A_RC_IN_RGB_C_MAPPING_EXPAND_NEGATE                    = $00006000;
const   NV2A_RC_IN_RGB_C_MAPPING_HALF_BIAS_NORMAL                 = $00008000;
const   NV2A_RC_IN_RGB_C_MAPPING_HALF_BIAS_NEGATE                 = $0000a000;
const   NV2A_RC_IN_RGB_C_MAPPING_SIGNED_IDENTITY                  = $0000c000;
const   NV2A_RC_IN_RGB_C_MAPPING_SIGNED_NEGATE                    = $0000e000;
const  NV2A_RC_IN_RGB_B_INPUT_SHIFT                               = 16;
const  NV2A_RC_IN_RGB_B_INPUT_MASK                                = $000f0000;
const   NV2A_RC_IN_RGB_B_INPUT_ZERO                               = $00000000;
const   NV2A_RC_IN_RGB_B_INPUT_CONSTANT_COLOR0                    = $00010000;
const   NV2A_RC_IN_RGB_B_INPUT_CONSTANT_COLOR1                    = $00020000;
const   NV2A_RC_IN_RGB_B_INPUT_FOG                                = $00030000;
const   NV2A_RC_IN_RGB_B_INPUT_PRIMARY_COLOR                      = $00040000;
const   NV2A_RC_IN_RGB_B_INPUT_SECONDARY_COLOR                    = $00050000;
const   NV2A_RC_IN_RGB_B_INPUT_TEXTURE0                           = $00080000;
const   NV2A_RC_IN_RGB_B_INPUT_TEXTURE1                           = $00090000;
const   NV2A_RC_IN_RGB_B_INPUT_SPARE0                             = $000c0000;
const   NV2A_RC_IN_RGB_B_INPUT_SPARE1                             = $000d0000;
const   NV2A_RC_IN_RGB_B_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $000e0000;
const   NV2A_RC_IN_RGB_B_INPUT_E_TIMES_F                          = $000f0000;
const   NV2A_RC_IN_RGB_B_INPUT_TEXTURE2                           = $000a0000;
const   NV2A_RC_IN_RGB_B_INPUT_TEXTURE3                           = $000b0000;
const  NV2A_RC_IN_RGB_B_COMPONENT_USAGE                           = (1 shl 20);
const   NV2A_RC_IN_RGB_B_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_IN_RGB_B_COMPONENT_USAGE_ALPHA                    = $00100000;
const  NV2A_RC_IN_RGB_B_MAPPING_SHIFT                             = 21;
const  NV2A_RC_IN_RGB_B_MAPPING_MASK                              = $00e00000;
const   NV2A_RC_IN_RGB_B_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_IN_RGB_B_MAPPING_UNSIGNED_INVERT                  = $00200000;
const   NV2A_RC_IN_RGB_B_MAPPING_EXPAND_NORMAL                    = $00400000;
const   NV2A_RC_IN_RGB_B_MAPPING_EXPAND_NEGATE                    = $00600000;
const   NV2A_RC_IN_RGB_B_MAPPING_HALF_BIAS_NORMAL                 = $00800000;
const   NV2A_RC_IN_RGB_B_MAPPING_HALF_BIAS_NEGATE                 = $00a00000;
const   NV2A_RC_IN_RGB_B_MAPPING_SIGNED_IDENTITY                  = $00c00000;
const   NV2A_RC_IN_RGB_B_MAPPING_SIGNED_NEGATE                    = $00e00000;
const  NV2A_RC_IN_RGB_A_INPUT_SHIFT                               = 24;
const  NV2A_RC_IN_RGB_A_INPUT_MASK                                = $0f000000;
const   NV2A_RC_IN_RGB_A_INPUT_ZERO                               = $00000000;
const   NV2A_RC_IN_RGB_A_INPUT_CONSTANT_COLOR0                    = $01000000;
const   NV2A_RC_IN_RGB_A_INPUT_CONSTANT_COLOR1                    = $02000000;
const   NV2A_RC_IN_RGB_A_INPUT_FOG                                = $03000000;
const   NV2A_RC_IN_RGB_A_INPUT_PRIMARY_COLOR                      = $04000000;
const   NV2A_RC_IN_RGB_A_INPUT_SECONDARY_COLOR                    = $05000000;
const   NV2A_RC_IN_RGB_A_INPUT_TEXTURE0                           = $08000000;
const   NV2A_RC_IN_RGB_A_INPUT_TEXTURE1                           = $09000000;
const   NV2A_RC_IN_RGB_A_INPUT_SPARE0                             = $0c000000;
const   NV2A_RC_IN_RGB_A_INPUT_SPARE1                             = $0d000000;
const   NV2A_RC_IN_RGB_A_INPUT_SPARE0_PLUS_SECONDARY_COLOR        = $0e000000;
const   NV2A_RC_IN_RGB_A_INPUT_E_TIMES_F                          = $0f000000;
const   NV2A_RC_IN_RGB_A_INPUT_TEXTURE2                           = $0a000000;
const   NV2A_RC_IN_RGB_A_INPUT_TEXTURE3                           = $0b000000;
const  NV2A_RC_IN_RGB_A_COMPONENT_USAGE                           = (1 shl 28);
const   NV2A_RC_IN_RGB_A_COMPONENT_USAGE_RGB                      = $00000000;
const   NV2A_RC_IN_RGB_A_COMPONENT_USAGE_ALPHA                    = $10000000;
const  NV2A_RC_IN_RGB_A_MAPPING_SHIFT                             = 29;
const  NV2A_RC_IN_RGB_A_MAPPING_MASK                              = $e0000000;
const   NV2A_RC_IN_RGB_A_MAPPING_UNSIGNED_IDENTITY                = $00000000;
const   NV2A_RC_IN_RGB_A_MAPPING_UNSIGNED_INVERT                  = $20000000;
const   NV2A_RC_IN_RGB_A_MAPPING_EXPAND_NORMAL                    = $40000000;
const   NV2A_RC_IN_RGB_A_MAPPING_EXPAND_NEGATE                    = $60000000;
const   NV2A_RC_IN_RGB_A_MAPPING_HALF_BIAS_NORMAL                 = $80000000;
const   NV2A_RC_IN_RGB_A_MAPPING_HALF_BIAS_NEGATE                 = $a0000000;
const   NV2A_RC_IN_RGB_A_MAPPING_SIGNED_IDENTITY                  = $c0000000;
const   NV2A_RC_IN_RGB_A_MAPPING_SIGNED_NEGATE                    = $e0000000;
//const NV2A_COLOR_KEY_COLOR(x)                                   = ($00000ae0+((x)*4)); // Dxbx
const NV2A_COLOR_KEY_COLOR__SIZE                                  = $00000004; // Dxbx
const NV2A_VIEWPORT_SCALE_X                                       = $00000af0;
const NV2A_VIEWPORT_SCALE_Y                                       = $00000af4;
const NV2A_VIEWPORT_SCALE_Z                                       = $00000af8;
const NV2A_VIEWPORT_SCALE_W                                       = $00000afc;
//const NV2A_VP_UPLOAD_INST(x)                                    = ($00000b00+((x)*4));
const NV2A_VP_UPLOAD_INST__0                                      = ($00000b00+((0)*4)); // Dxbx
const NV2A_VP_UPLOAD_INST__SIZE                                   = $00000020; // Dxbx
//const NV2A_VP_UPLOAD_CONST(x)                                   = ($00000b80+((x)*4));
const NV2A_VP_UPLOAD_CONST__0                                     = ($00000b80+((0)*4)); // Dxbx
const NV2A_VP_UPLOAD_CONST__SIZE                                  = $00000020;
//const NV2A_LIGHT_BACK_AMBIENT_R(x)                              = ($00000c00+((x)*64));
const NV2A_LIGHT_BACK_AMBIENT_R__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_AMBIENT_G(x)                              = ($00000c04+((x)*64));
const NV2A_LIGHT_BACK_AMBIENT_G__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_AMBIENT_B(x)                              = ($00000c08+((x)*64));
const NV2A_LIGHT_BACK_AMBIENT_B__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_DIFFUSE_R(x)                              = ($00000c0c+((x)*64));
const NV2A_LIGHT_BACK_DIFFUSE_R__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_DIFFUSE_G(x)                              = ($00000c10+((x)*64));
const NV2A_LIGHT_BACK_DIFFUSE_G__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_DIFFUSE_B(x)                              = ($00000c14+((x)*64));
const NV2A_LIGHT_BACK_DIFFUSE_B__SIZE                             = $00000008;
//const NV2A_LIGHT_BACK_SPECULAR_R(x)                             = ($00000c18+((x)*64));
const NV2A_LIGHT_BACK_SPECULAR_R__SIZE                            = $00000008;
//const NV2A_LIGHT_BACK_SPECULAR_G(x)                             = ($00000c1c+((x)*64));
const NV2A_LIGHT_BACK_SPECULAR_G__SIZE                            = $00000008;
//const NV2A_LIGHT_BACK_SPECULAR_B(x)                             = ($00000c20+((x)*64));
const NV2A_LIGHT_BACK_SPECULAR_B__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_AMBIENT_R(x)                             = ($00001000+((x)*128));
const NV2A_LIGHT_FRONT_AMBIENT_R__0                               = ($00001000+((0)*128)); // Dxbx
const NV2A_LIGHT_FRONT_AMBIENT_R__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_AMBIENT_G(x)                             = ($00001004+((x)*128));
const NV2A_LIGHT_FRONT_AMBIENT_G__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_AMBIENT_B(x)                             = ($00001008+((x)*128));
const NV2A_LIGHT_FRONT_AMBIENT_B__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_DIFFUSE_R(x)                             = ($0000100c+((x)*128));
const NV2A_LIGHT_FRONT_DIFFUSE_R__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_DIFFUSE_G(x)                             = ($00001010+((x)*128));
const NV2A_LIGHT_FRONT_DIFFUSE_G__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_DIFFUSE_B(x)                             = ($00001014+((x)*128));
const NV2A_LIGHT_FRONT_DIFFUSE_B__SIZE                            = $00000008;
//const NV2A_LIGHT_FRONT_SPECULAR_R(x)                            = ($00001018+((x)*128));
const NV2A_LIGHT_FRONT_SPECULAR_R__SIZE                           = $00000008;
//const NV2A_LIGHT_FRONT_SPECULAR_G(x)                            = ($0000101c+((x)*128));
const NV2A_LIGHT_FRONT_SPECULAR_G__SIZE                           = $00000008;
//const NV2A_LIGHT_FRONT_SPECULAR_B(x)                            = ($00001020+((x)*128));
const NV2A_LIGHT_FRONT_SPECULAR_B__SIZE                           = $00000008;
//const NV2A_LIGHT_HALF_VECTOR_X(x)                               = ($00001028+((x)*128));
const NV2A_LIGHT_HALF_VECTOR_X__SIZE                              = $00000008;
//const NV2A_LIGHT_HALF_VECTOR_Y(x)                               = ($0000102c+((x)*128));
const NV2A_LIGHT_HALF_VECTOR_Y__SIZE                              = $00000008;
//const NV2A_LIGHT_HALF_VECTOR_Z(x)                               = ($00001030+((x)*128));
const NV2A_LIGHT_HALF_VECTOR_Z__SIZE                              = $00000008;
//const NV2A_LIGHT_DIRECTION_X(x)                                 = ($00001034+((x)*128));
const NV2A_LIGHT_DIRECTION_X__SIZE                                = $00000008;
//const NV2A_LIGHT_DIRECTION_Y(x)                                 = ($00001038+((x)*128));
const NV2A_LIGHT_DIRECTION_Y__SIZE                                = $00000008;
//const NV2A_LIGHT_DIRECTION_Z(x)                                 = ($0000103c+((x)*128));
const NV2A_LIGHT_DIRECTION_Z__SIZE                                = $00000008;
//const NV2A_LIGHT_SPOT_CUTOFF_A(x)                               = ($00001040+((x)*128));
const NV2A_LIGHT_SPOT_CUTOFF_A__SIZE                              = $00000008;
//const NV2A_LIGHT_SPOT_CUTOFF_B(x)                               = ($00001044+((x)*128));
const NV2A_LIGHT_SPOT_CUTOFF_B__SIZE                              = $00000008;
//const NV2A_LIGHT_SPOT_CUTOFF_C(x)                               = ($00001048+((x)*128));
const NV2A_LIGHT_SPOT_CUTOFF_C__SIZE                              = $00000008;
//const NV2A_LIGHT_SPOT_DIR_X(x)                                  = ($0000104c+((x)*128));
const NV2A_LIGHT_SPOT_DIR_X__SIZE                                 = $00000008;
//const NV2A_LIGHT_SPOT_DIR_Y(x)                                  = ($00001050+((x)*128));
const NV2A_LIGHT_SPOT_DIR_Y__SIZE                                 = $00000008;
//const NV2A_LIGHT_SPOT_DIR_Z(x)                                  = ($00001054+((x)*128));
const NV2A_LIGHT_SPOT_DIR_Z__SIZE                                 = $00000008;
//const NV2A_LIGHT_SPOT_CUTOFF_D(x)                               = ($00001058+((x)*128));
const NV2A_LIGHT_SPOT_CUTOFF_D__SIZE                              = $00000008;
//const NV2A_LIGHT_POSITION_X(x)                                  = ($0000105c+((x)*128));
const NV2A_LIGHT_POSITION_X__SIZE                                 = $00000008;
//const NV2A_LIGHT_POSITION_Y(x)                                  = ($00001060+((x)*128));
const NV2A_LIGHT_POSITION_Y__SIZE                                 = $00000008;
//const NV2A_LIGHT_POSITION_Z(x)                                  = ($00001064+((x)*128));
const NV2A_LIGHT_POSITION_Z__SIZE                                 = $00000008;
//const NV2A_LIGHT_ATTENUATION_CONSTANT(x)                        = ($00001068+((x)*128));
const NV2A_LIGHT_ATTENUATION_CONSTANT__SIZE                       = $00000008;
//const NV2A_LIGHT_ATTENUATION_LINEAR(x)                          = ($0000106c+((x)*128));
const NV2A_LIGHT_ATTENUATION_LINEAR__SIZE                         = $00000008;
//const NV2A_LIGHT_ATTENUATION_QUADRATIC(x)                       = ($00001070+((x)*128));
const NV2A_LIGHT_ATTENUATION_QUADRATIC__SIZE                      = $00000008;
const NV2A_POLYGON_STIPPLE_ENABLE                                 = $0000147c;
//const NV2A_POLYGON_STIPPLE_PATTERN(x)                           = ($00001480+((x)*4));
const NV2A_POLYGON_STIPPLE_PATTERN__SIZE                          = $00000020;
const NV2A_VERTEX_POS_3F_X                                        = $00001500;
const NV2A_VERTEX_POS_3F_Y                                        = $00001504;
const NV2A_VERTEX_POS_3F_Z                                        = $00001508;
const NV2A_VERTEX_POS_4F_X                                        = $00001518;
const NV2A_VERTEX_POS_4F_Y                                        = $0000151c;
const NV2A_VERTEX_POS_4F_Z                                        = $00001520;
const NV2A_VERTEX_POS_3I_XY                                       = $00001528;
const  NV2A_VERTEX_POS_3I_XY_X_SHIFT                              = 0;
const  NV2A_VERTEX_POS_3I_XY_X_MASK                               = $0000ffff;
const  NV2A_VERTEX_POS_3I_XY_Y_SHIFT                              = 16;
const  NV2A_VERTEX_POS_3I_XY_Y_MASK                               = $ffff0000;
const NV2A_VERTEX_POS_3I_Z                                        = $0000152c;
const  NV2A_VERTEX_POS_3I_Z_Z_SHIFT                               = 0;
const  NV2A_VERTEX_POS_3I_Z_Z_MASK                                = $0000ffff;
const NV2A_VERTEX_NOR_3F_X                                        = $00001530;
const NV2A_VERTEX_NOR_3F_Y                                        = $00001534;
const NV2A_VERTEX_NOR_3F_Z                                        = $00001538;
const NV2A_VERTEX_NOR_3I_XY                                       = $00001540;
const  NV2A_VERTEX_NOR_3I_XY_X_SHIFT                              = 0;
const  NV2A_VERTEX_NOR_3I_XY_X_MASK                               = $0000ffff;
const  NV2A_VERTEX_NOR_3I_XY_Y_SHIFT                              = 16;
const  NV2A_VERTEX_NOR_3I_XY_Y_MASK                               = $ffff0000;
const NV2A_VERTEX_NOR_3I_Z                                        = $00001544;
const  NV2A_VERTEX_NOR_3I_Z_Z_SHIFT                               = 0;
const  NV2A_VERTEX_NOR_3I_Z_Z_MASK                                = $0000ffff;
const NV2A_VERTEX_COL_4F_X                                        = $00001550;
const NV2A_VERTEX_COL_4F_Y                                        = $00001554;
const NV2A_VERTEX_COL_4F_Z                                        = $00001558;
const NV2A_VERTEX_COL_4F_W                                        = $0000155c;
const NV2A_VERTEX_COL_3F_X                                        = $00001560;
const NV2A_VERTEX_COL_3F_Y                                        = $00001564;
const NV2A_VERTEX_COL_3F_Z                                        = $00001568;
const NV2A_VERTEX_COL_4I                                          = $0000156c;
const  NV2A_VERTEX_COL_4I_R_SHIFT                                 = 0;
const  NV2A_VERTEX_COL_4I_R_MASK                                  = $000000ff;
const  NV2A_VERTEX_COL_4I_G_SHIFT                                 = 8;
const  NV2A_VERTEX_COL_4I_G_MASK                                  = $0000ff00;
const  NV2A_VERTEX_COL_4I_B_SHIFT                                 = 16;
const  NV2A_VERTEX_COL_4I_B_MASK                                  = $00ff0000;
const  NV2A_VERTEX_COL_4I_A_SHIFT                                 = 24;
const  NV2A_VERTEX_COL_4I_A_MASK                                  = $ff000000;
const NV2A_VERTEX_COL2_3F_X                                       = $00001580;
const NV2A_VERTEX_COL2_3F_Y                                       = $00001584;
const NV2A_VERTEX_COL2_3F_Z                                       = $00001588;
const NV2A_VERTEX_COL2_4I                                         = $0000158c;
const  NV2A_VERTEX_COL2_4I_R_SHIFT                                = 0;
const  NV2A_VERTEX_COL2_4I_R_MASK                                 = $000000ff;
const  NV2A_VERTEX_COL2_4I_G_SHIFT                                = 8;
const  NV2A_VERTEX_COL2_4I_G_MASK                                 = $0000ff00;
const  NV2A_VERTEX_COL2_4I_B_SHIFT                                = 16;
const  NV2A_VERTEX_COL2_4I_B_MASK                                 = $00ff0000;
const  NV2A_VERTEX_COL2_4I_A_SHIFT                                = 24;
const  NV2A_VERTEX_COL2_4I_A_MASK                                 = $ff000000;
const NV2A_VERTEX_TX0_2F_S                                        = $00001590;
const NV2A_VERTEX_TX0_2F_T                                        = $00001594;
const NV2A_VERTEX_TX0_2I                                          = $00001598;
const  NV2A_VERTEX_TX0_2I_S_SHIFT                                 = 0;
const  NV2A_VERTEX_TX0_2I_S_MASK                                  = $0000ffff;
const  NV2A_VERTEX_TX0_2I_T_SHIFT                                 = 16;
const  NV2A_VERTEX_TX0_2I_T_MASK                                  = $ffff0000;
const NV2A_VERTEX_TX0_4F_S                                        = $000015a0;
const NV2A_VERTEX_TX0_4F_T                                        = $000015a4;
const NV2A_VERTEX_TX0_4F_R                                        = $000015a8;
const NV2A_VERTEX_TX0_4F_Q                                        = $000015ac;
const NV2A_VERTEX_TX0_4I_ST                                       = $000015b0;
const  NV2A_VERTEX_TX0_4I_ST_S_SHIFT                              = 0;
const  NV2A_VERTEX_TX0_4I_ST_S_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX0_4I_ST_T_SHIFT                              = 16;
const  NV2A_VERTEX_TX0_4I_ST_T_MASK                               = $ffff0000;
const NV2A_VERTEX_TX0_4I_RQ                                       = $000015b4;
const  NV2A_VERTEX_TX0_4I_RQ_R_SHIFT                              = 0;
const  NV2A_VERTEX_TX0_4I_RQ_R_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX0_4I_RQ_Q_SHIFT                              = 16;
const  NV2A_VERTEX_TX0_4I_RQ_Q_MASK                               = $ffff0000;
const NV2A_VERTEX_TX1_2F_S                                        = $000015b8;
const NV2A_VERTEX_TX1_2F_T                                        = $000015bc;
const NV2A_VERTEX_TX1_2I                                          = $000015c0;
const  NV2A_VERTEX_TX1_2I_S_SHIFT                                 = 0;
const  NV2A_VERTEX_TX1_2I_S_MASK                                  = $0000ffff;
const  NV2A_VERTEX_TX1_2I_T_SHIFT                                 = 16;
const  NV2A_VERTEX_TX1_2I_T_MASK                                  = $ffff0000;
const NV2A_VERTEX_TX1_4F_S                                        = $000015c8;
const NV2A_VERTEX_TX1_4F_T                                        = $000015cc;
const NV2A_VERTEX_TX1_4F_R                                        = $000015d0;
const NV2A_VERTEX_TX1_4F_Q                                        = $000015d4;
const NV2A_VERTEX_TX1_4I_ST                                       = $000015d8;
const  NV2A_VERTEX_TX1_4I_ST_S_SHIFT                              = 0;
const  NV2A_VERTEX_TX1_4I_ST_S_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX1_4I_ST_T_SHIFT                              = 16;
const  NV2A_VERTEX_TX1_4I_ST_T_MASK                               = $ffff0000;
const NV2A_VERTEX_TX1_4I_RQ                                       = $000015dc;
const  NV2A_VERTEX_TX1_4I_RQ_R_SHIFT                              = 0;
const  NV2A_VERTEX_TX1_4I_RQ_R_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX1_4I_RQ_Q_SHIFT                              = 16;
const  NV2A_VERTEX_TX1_4I_RQ_Q_MASK                               = $ffff0000;
const NV2A_VERTEX_TX2_2F_S                                        = $000015e0;
const NV2A_VERTEX_TX2_2F_T                                        = $000015e4;
const NV2A_VERTEX_TX2_2I                                          = $000015e8;
const  NV2A_VERTEX_TX2_2I_S_SHIFT                                 = 0;
const  NV2A_VERTEX_TX2_2I_S_MASK                                  = $0000ffff;
const  NV2A_VERTEX_TX2_2I_T_SHIFT                                 = 16;
const  NV2A_VERTEX_TX2_2I_T_MASK                                  = $ffff0000;
const NV2A_VERTEX_TX2_4F_S                                        = $000015f0;
const NV2A_VERTEX_TX2_4F_T                                        = $000015f4;
const NV2A_VERTEX_TX2_4F_R                                        = $000015f8;
const NV2A_VERTEX_TX2_4F_Q                                        = $000015fc;
const NV2A_VERTEX_TX2_4I_ST                                       = $00001600;
const  NV2A_VERTEX_TX2_4I_ST_S_SHIFT                              = 0;
const  NV2A_VERTEX_TX2_4I_ST_S_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX2_4I_ST_T_SHIFT                              = 16;
const  NV2A_VERTEX_TX2_4I_ST_T_MASK                               = $ffff0000;
const NV2A_VERTEX_TX2_4I_RQ                                       = $00001604;
const  NV2A_VERTEX_TX2_4I_RQ_R_SHIFT                              = 0;
const  NV2A_VERTEX_TX2_4I_RQ_R_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX2_4I_RQ_Q_SHIFT                              = 16;
const  NV2A_VERTEX_TX2_4I_RQ_Q_MASK                               = $ffff0000;
const NV2A_VERTEX_TX3_2F_S                                        = $00001608;
const NV2A_VERTEX_TX3_2F_T                                        = $0000160c;
const NV2A_VERTEX_TX3_2I                                          = $00001610;
const  NV2A_VERTEX_TX3_2I_S_SHIFT                                 = 0;
const  NV2A_VERTEX_TX3_2I_S_MASK                                  = $0000ffff;
const  NV2A_VERTEX_TX3_2I_T_SHIFT                                 = 16;
const  NV2A_VERTEX_TX3_2I_T_MASK                                  = $ffff0000;
const NV2A_VERTEX_TX3_4F_S                                        = $00001620;
const NV2A_VERTEX_TX3_4F_T                                        = $00001624;
const NV2A_VERTEX_TX3_4F_R                                        = $00001628;
const NV2A_VERTEX_TX3_4F_Q                                        = $0000162c;
const NV2A_VERTEX_TX3_4I_ST                                       = $00001630;
const  NV2A_VERTEX_TX3_4I_ST_S_SHIFT                              = 0;
const  NV2A_VERTEX_TX3_4I_ST_S_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX3_4I_ST_T_SHIFT                              = 16;
const  NV2A_VERTEX_TX3_4I_ST_T_MASK                               = $ffff0000;
const NV2A_VERTEX_TX3_4I_RQ                                       = $00001634;
const  NV2A_VERTEX_TX3_4I_RQ_R_SHIFT                              = 0;
const  NV2A_VERTEX_TX3_4I_RQ_R_MASK                               = $0000ffff;
const  NV2A_VERTEX_TX3_4I_RQ_Q_SHIFT                              = 16;
const  NV2A_VERTEX_TX3_4I_RQ_Q_MASK                               = $ffff0000;
const NV2A_VERTEX_FOG_1F                                          = $00001698;
const NV2A_EDGEFLAG_ENABLE                                        = $000016bc;
const NV2A_VTX_CACHE_INVALIDATE                                   = $00001710;
//const NV2A_VTXBUF_ADDRESS(x)                                    = ($00001720+((x)*4));
const NV2A_VTXBUF_ADDRESS__0                                      = ($00001720+((0)*4)); // Dxbx
const NV2A_VTXBUF_ADDRESS__3                                      = ($00001720+((3)*4)); // Dxbx
const NV2A_VTXBUF_ADDRESS__SIZE                                   = $00000010;
const  NV2A_VTXBUF_ADDRESS_DMA1                                   = (1 shl 31);
const  NV2A_VTXBUF_ADDRESS_OFFSET_SHIFT                           = 0;
const  NV2A_VTXBUF_ADDRESS_OFFSET_MASK                            = $0fffffff;
//const NV2A_VTXFMT(x)                                            = ($00001760+((x)*4));
const NV2A_VTXFMT__0                                              = ($00001760+((0)*4)); // Dxbx
const NV2A_VTXFMT__15                                             = ($00001760+((15)*4)); // Dxbx
const NV2A_VTXFMT__SIZE                                           = $00000010;
const  NV2A_VTXFMT_TYPE_SHIFT                                     = 0;
const  NV2A_VTXFMT_TYPE_MASK                                      = $0000000f;
const   NV2A_VTXFMT_TYPE_FLOAT                                    = $00000002;
const   NV2A_VTXFMT_TYPE_UBYTE                                    = $00000004;
const   NV2A_VTXFMT_TYPE_USHORT                                   = $00000005;
const  NV2A_VTXFMT_SIZE_SHIFT                                     = 4;
const  NV2A_VTXFMT_SIZE_MASK                                      = $000000f0;
const  NV2A_VTXFMT_STRIDE_SHIFT                                   = 8;
const  NV2A_VTXFMT_STRIDE_MASK                                    = $0000ff00;
const NV2A_LIGHT_MODEL_BACK_AMBIENT_R                             = $000017a0;
const NV2A_LIGHT_MODEL_BACK_AMBIENT_G                             = $000017a4;
const NV2A_LIGHT_MODEL_BACK_AMBIENT_B                             = $000017a8;
const NV2A_MATERIAL_FACTOR_BACK_A                                 = $000017ac;
const NV2A_MATERIAL_FACTOR_BACK_R                                 = $000017b0;
const NV2A_MATERIAL_FACTOR_BACK_G                                 = $000017b4;
const NV2A_MATERIAL_FACTOR_BACK_B                                 = $000017b8;
const NV2A_COLOR_LOGIC_OP_ENABLE                                  = $000017bc;
const NV2A_COLOR_LOGIC_OP_OP                                      = $000017c0;
const  NV2A_COLOR_LOGIC_OP_OP_CLEAR                               = $00001500;
const  NV2A_COLOR_LOGIC_OP_OP_AND                                 = $00001501;
const  NV2A_COLOR_LOGIC_OP_OP_AND_REVERSE                         = $00001502;
const  NV2A_COLOR_LOGIC_OP_OP_COPY                                = $00001503;
const  NV2A_COLOR_LOGIC_OP_OP_AND_INVERTED                        = $00001504;
const  NV2A_COLOR_LOGIC_OP_OP_NOOP                                = $00001505;
const  NV2A_COLOR_LOGIC_OP_OP_XOR                                 = $00001506;
const  NV2A_COLOR_LOGIC_OP_OP_OR                                  = $00001507;
const  NV2A_COLOR_LOGIC_OP_OP_NOR                                 = $00001508;
const  NV2A_COLOR_LOGIC_OP_OP_EQUIV                               = $00001509;
const  NV2A_COLOR_LOGIC_OP_OP_INVERT                              = $0000150a;
const  NV2A_COLOR_LOGIC_OP_OP_OR_REVERSE                          = $0000150b;
const  NV2A_COLOR_LOGIC_OP_OP_COPY_INVERTED                       = $0000150c;
const  NV2A_COLOR_LOGIC_OP_OP_OR_INVERTED                         = $0000150d;
const  NV2A_COLOR_LOGIC_OP_OP_NAND                                = $0000150e;
const  NV2A_COLOR_LOGIC_OP_OP_SET                                 = $0000150f;
const NV2A_LIGHT_MODEL_TWO_SIDE_ENABLE                            = $000017c4;
const NV2A_TX_SHADER_CULL_MODE                                    = $000017f8;
const  NV2A_TX_SHADER_CULL_MODE_TX0_S                             = (1 shl  0);
const   NV2A_TX_SHADER_CULL_MODE_TX0_S_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX0_S_LESS                       = $00000001;
const  NV2A_TX_SHADER_CULL_MODE_TX0_T                             = (1 shl  1);
const   NV2A_TX_SHADER_CULL_MODE_TX0_T_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX0_T_LESS                       = $00000002;
const  NV2A_TX_SHADER_CULL_MODE_TX0_R                             = (1 shl  2);
const   NV2A_TX_SHADER_CULL_MODE_TX0_R_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX0_R_LESS                       = $00000004;
const  NV2A_TX_SHADER_CULL_MODE_TX0_Q                             = (1 shl  3);
const   NV2A_TX_SHADER_CULL_MODE_TX0_Q_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX0_Q_LESS                       = $00000008;
const  NV2A_TX_SHADER_CULL_MODE_TX1_S                             = (1 shl  4);
const   NV2A_TX_SHADER_CULL_MODE_TX1_S_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX1_S_LESS                       = $00000010;
const  NV2A_TX_SHADER_CULL_MODE_TX1_T                             = (1 shl  5);
const   NV2A_TX_SHADER_CULL_MODE_TX1_T_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX1_T_LESS                       = $00000020;
const  NV2A_TX_SHADER_CULL_MODE_TX1_R                             = (1 shl  6);
const   NV2A_TX_SHADER_CULL_MODE_TX1_R_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX1_R_LESS                       = $00000040;
const  NV2A_TX_SHADER_CULL_MODE_TX1_Q                             = (1 shl  7);
const   NV2A_TX_SHADER_CULL_MODE_TX1_Q_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX1_Q_LESS                       = $00000080;
const  NV2A_TX_SHADER_CULL_MODE_TX2_S                             = (1 shl  8);
const   NV2A_TX_SHADER_CULL_MODE_TX2_S_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX2_S_LESS                       = $00000100;
const  NV2A_TX_SHADER_CULL_MODE_TX2_T                             = (1 shl  9);
const   NV2A_TX_SHADER_CULL_MODE_TX2_T_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX2_T_LESS                       = $00000200;
const  NV2A_TX_SHADER_CULL_MODE_TX2_R                             = (1 shl 10);
const   NV2A_TX_SHADER_CULL_MODE_TX2_R_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX2_R_LESS                       = $00000400;
const  NV2A_TX_SHADER_CULL_MODE_TX2_Q                             = (1 shl 11);
const   NV2A_TX_SHADER_CULL_MODE_TX2_Q_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX2_Q_LESS                       = $00000800;
const  NV2A_TX_SHADER_CULL_MODE_TX3_S                             = (1 shl 12);
const   NV2A_TX_SHADER_CULL_MODE_TX3_S_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX3_S_LESS                       = $00001000;
const  NV2A_TX_SHADER_CULL_MODE_TX3_T                             = (1 shl 13);
const   NV2A_TX_SHADER_CULL_MODE_TX3_T_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX3_T_LESS                       = $00002000;
const  NV2A_TX_SHADER_CULL_MODE_TX3_R                             = (1 shl 14);
const   NV2A_TX_SHADER_CULL_MODE_TX3_R_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX3_R_LESS                       = $00004000;
const  NV2A_TX_SHADER_CULL_MODE_TX3_Q                             = (1 shl 15);
const   NV2A_TX_SHADER_CULL_MODE_TX3_Q_GEQUAL                     = $00000000;
const   NV2A_TX_SHADER_CULL_MODE_TX3_Q_LESS                       = $00008000;
const NV2A_VERTEX_BEGIN_END                                       = $000017fc;
const  NV2A_VERTEX_BEGIN_END_STOP                                 = $00000000;
const  NV2A_VERTEX_BEGIN_END_POINTS                               = $00000001;
const  NV2A_VERTEX_BEGIN_END_LINES                                = $00000002;
const  NV2A_VERTEX_BEGIN_END_LINE_LOOP                            = $00000003;
const  NV2A_VERTEX_BEGIN_END_LINE_STRIP                           = $00000004;
const  NV2A_VERTEX_BEGIN_END_TRIANGLES                            = $00000005;
const  NV2A_VERTEX_BEGIN_END_TRIANGLE_STRIP                       = $00000006;
const  NV2A_VERTEX_BEGIN_END_TRIANGLE_FAN                         = $00000007;
const  NV2A_VERTEX_BEGIN_END_QUADS                                = $00000008;
const  NV2A_VERTEX_BEGIN_END_QUAD_STRIP                           = $00000009;
const  NV2A_VERTEX_BEGIN_END_POLYGON                              = $0000000a;
const NV2A_VB_ELEMENT_U16                                         = $00001800;
const  NV2A_VB_ELEMENT_U16_I0_SHIFT                               = 0;
const  NV2A_VB_ELEMENT_U16_I0_MASK                                = $0000ffff;
const  NV2A_VB_ELEMENT_U16_I1_SHIFT                               = 16;
const  NV2A_VB_ELEMENT_U16_I1_MASK                                = $ffff0000;
const NV2A_VB_ELEMENT_U32                                         = $00001808;
const NV2A_VB_VERTEX_BATCH                                        = $00001810;
const  NV2A_VB_VERTEX_BATCH_OFFSET_SHIFT                          = 0;
const  NV2A_VB_VERTEX_BATCH_OFFSET_MASK                           = $00ffffff;
const  NV2A_VB_VERTEX_BATCH_COUNT_SHIFT                           = 24;
const  NV2A_VB_VERTEX_BATCH_COUNT_MASK                            = $ff000000;
const NV2A_VERTEX_DATA                                            = $00001818;
const NV2A_TX_SHADER_CONST_EYE_X                                  = $0000181c;
const NV2A_TX_SHADER_CONST_EYE_Y                                  = $00001820;
const NV2A_TX_SHADER_CONST_EYE_Z                                  = $00001824;
//const NV2A_VERTEX_DATA2F(x)                                     = ($00001880+((x)*8)); // Dxbx
const NV2A_VERTEX_DATA2F__0                                       = ($00001880+((0)*8)); // Dxbx
const NV2A_VERTEX_DATA2F__15                                      = ($00001880+((15)*8)); // Dxbx
const NV2A_VERTEX_DATA2F__SIZE                                    = $00000010; // Dxbx
//const NV2A_VERTEX_DATA2S(x)                                     = ($00001900+((x)*4)); // Dxbx
const NV2A_VERTEX_DATA2S__0                                       = ($00001900+((0)*4)); // Dxbx
const NV2A_VERTEX_DATA2S__15                                      = ($00001900+((15)*4)); // Dxbx
const NV2A_VERTEX_DATA2S__SIZE                                    = $00000010; // Dxbx
//const NV2A_VERTEX_DATA4UB(x)                                    = ($00001940+((x)*4)); // Dxbx
const NV2A_VERTEX_DATA4UB__0                                      = ($00001940+((0)*4)); // Dxbx
const NV2A_VERTEX_DATA4UB__15                                     = ($00001940+((15)*4)); // Dxbx
const NV2A_VERTEX_DATA4UB__SIZE                                   = $00000010; // Dxbx
//const NV2A_VERTEX_DATA4S(x)                                     = ($00001980+((x)*8)); // Dxbx
const NV2A_VERTEX_DATA4S__0                                       = ($00001980+((0)*8)); // Dxbx
const NV2A_VERTEX_DATA4S__15                                      = ($00001980+((15)*8)); // Dxbx
const NV2A_VERTEX_DATA4S__SIZE                                    = $00000010; // Dxbx
//const NV2A_VERTEX_DATA4F(x)                                     = ($00001a00+((x)*16)); // Dxbx
const NV2A_VERTEX_DATA4F__0                                       = ($00001a00+((0)*16)); // Dxbx
const NV2A_VERTEX_DATA4F__15                                      = ($00001a00+((15)*16)); // Dxbx
const NV2A_VERTEX_DATA4F__SIZE                                    = $00000010; // Dxbx
//const NV2A_VTX_ATTR_4F_X(x)                                     = ($00001a00+((x)*16));
const NV2A_VTX_ATTR_4F_X__0                                       = ($00001a00+((0)*16)); // Dxbx
const NV2A_VTX_ATTR_4F_X__SIZE                                    = $00000010;
//const NV2A_VTX_ATTR_4F_Y(x)                                     = ($00001a04+((x)*16));
const NV2A_VTX_ATTR_4F_Y__SIZE                                    = $00000010;
//const NV2A_VTX_ATTR_4F_Z(x)                                     = ($00001a08+((x)*16));
const NV2A_VTX_ATTR_4F_Z__SIZE                                    = $00000010;
//const NV2A_VTX_ATTR_4F_W(x)                                     = ($00001a0c+((x)*16));
const NV2A_VTX_ATTR_4F_W__SIZE                                    = $00000010;
//const NV2A_TX_OFFSET(x)                                         = ($00001b00+((x)*64));
const NV2A_TX_OFFSET__0                                           = ($00001b00+((0)*64)); // Dxbx
const NV2A_TX_OFFSET__1                                           = ($00001b00+((1)*64)); // Dxbx
const NV2A_TX_OFFSET__2                                           = ($00001b00+((2)*64)); // Dxbx
const NV2A_TX_OFFSET__3                                           = ($00001b00+((3)*64)); // Dxbx
const NV2A_TX_OFFSET__SIZE                                        = $00000004;
//const NV2A_TX_FORMAT(x)                                         = ($00001b04+((x)*64));
const NV2A_TX_FORMAT__0                                           = ($00001b04+((0)*64)); // Dxbx
const NV2A_TX_FORMAT__1                                           = ($00001b04+((1)*64)); // Dxbx
const NV2A_TX_FORMAT__2                                           = ($00001b04+((2)*64)); // Dxbx
const NV2A_TX_FORMAT__3                                           = ($00001b04+((3)*64)); // Dxbx
const NV2A_TX_FORMAT__SIZE                                        = $00000004;
const  NV2A_TX_FORMAT_DMA0                                        = (1 shl  0);
const  NV2A_TX_FORMAT_DMA1                                        = (1 shl  1);
const  NV2A_TX_FORMAT_CUBIC                                       = (1 shl  2);
const  NV2A_TX_FORMAT_NO_BORDER                                   = (1 shl  3);
const  NV2A_TX_FORMAT_DIMS_SHIFT                                  = 4;
const  NV2A_TX_FORMAT_DIMS_MASK                                   = $000000f0;
const   NV2A_TX_FORMAT_DIMS_1D                                    = $00000010;
const   NV2A_TX_FORMAT_DIMS_2D                                    = $00000020;
const   NV2A_TX_FORMAT_DIMS_3D                                    = $00000030;
const  NV2A_TX_FORMAT_FORMAT_SHIFT                                = 8;
const  NV2A_TX_FORMAT_FORMAT_MASK                                 = $0000ff00;
const   NV2A_TX_FORMAT_FORMAT_L8                                  = $00000000;
const   NV2A_TX_FORMAT_FORMAT_A8                                  = $00000100;
const   NV2A_TX_FORMAT_FORMAT_A1R5G5B5                            = $00000200;
const   NV2A_TX_FORMAT_FORMAT_A4R4G4B4                            = $00000400;
const   NV2A_TX_FORMAT_FORMAT_R5G6B5                              = $00000500;
const   NV2A_TX_FORMAT_FORMAT_A8R8G8B8                            = $00000600;
const   NV2A_TX_FORMAT_FORMAT_X8R8G8B8                            = $00000700;
const   NV2A_TX_FORMAT_FORMAT_INDEX8                              = $00000b00;
const   NV2A_TX_FORMAT_FORMAT_DXT1                                = $00000c00;
const   NV2A_TX_FORMAT_FORMAT_DXT3                                = $00000e00;
const   NV2A_TX_FORMAT_FORMAT_DXT5                                = $00000f00;
const   NV2A_TX_FORMAT_FORMAT_A1R5G5B5_RECT                       = $00001000;
const   NV2A_TX_FORMAT_FORMAT_R5G6B5_RECT                         = $00001100;
const   NV2A_TX_FORMAT_FORMAT_A8R8G8B8_RECT                       = $00001200;
const   NV2A_TX_FORMAT_FORMAT_L8_RECT                             = $00001300;
const   NV2A_TX_FORMAT_FORMAT_DSDT8_RECT                          = $00001700;
const   NV2A_TX_FORMAT_FORMAT_A8L8                                = $00001a00;
const   NV2A_TX_FORMAT_FORMAT_A8_RECT                             = $00001b00;
const   NV2A_TX_FORMAT_FORMAT_A4R4G4B4_RECT                       = $00001d00;
const   NV2A_TX_FORMAT_FORMAT_R8G8B8_RECT                         = $00001e00;
const   NV2A_TX_FORMAT_FORMAT_A8L8_RECT                           = $00002000;
const   NV2A_TX_FORMAT_FORMAT_DSDT8                               = $00002800;
const   NV2A_TX_FORMAT_FORMAT_HILO16                              = $00003300;
const   NV2A_TX_FORMAT_FORMAT_HILO16_RECT                         = $00003600;
const   NV2A_TX_FORMAT_FORMAT_HILO8                               = $00004400;
const   NV2A_TX_FORMAT_FORMAT_SIGNED_HILO8                        = $00004500;
const   NV2A_TX_FORMAT_FORMAT_HILO8_RECT                          = $00004600;
const   NV2A_TX_FORMAT_FORMAT_SIGNED_HILO8_RECT                   = $00004700;
const   NV2A_TX_FORMAT_FORMAT_A16                                 = $00003200;
const   NV2A_TX_FORMAT_FORMAT_A16_RECT                            = $00003500;
const   NV2A_TX_FORMAT_FORMAT_FLOAT_RGBA16_NV                     = $00004a00;
const   NV2A_TX_FORMAT_FORMAT_FLOAT_RGBA32_NV                     = $00004b00;
const   NV2A_TX_FORMAT_FORMAT_FLOAT_R32_NV                        = $00004c00;
const  NV2A_TX_FORMAT_MIPMAP                                      = (1 shl 19);
const  NV2A_TX_FORMAT_BASE_SIZE_U_SHIFT                           = 20;
const  NV2A_TX_FORMAT_BASE_SIZE_U_MASK                            = $00f00000;
const  NV2A_TX_FORMAT_BASE_SIZE_V_SHIFT                           = 24;
const  NV2A_TX_FORMAT_BASE_SIZE_V_MASK                            = $0f000000;
const  NV2A_TX_FORMAT_BASE_SIZE_W_SHIFT                           = 28;
const  NV2A_TX_FORMAT_BASE_SIZE_W_MASK                            = $f0000000;
//const NV2A_TX_WRAP(x)                                           = ($00001b08+((x)*64));
const NV2A_TX_WRAP__0                                             = ($00001b08+((0)*64)); // Dxbx
const NV2A_TX_WRAP__1                                             = ($00001b08+((1)*64)); // Dxbx
const NV2A_TX_WRAP__2                                             = ($00001b08+((2)*64)); // Dxbx
const NV2A_TX_WRAP__3                                             = ($00001b08+((3)*64)); // Dxbx
const NV2A_TX_WRAP__SIZE                                          = $00000004;
const  NV2A_TX_WRAP_S_SHIFT                                       = 0;
const  NV2A_TX_WRAP_S_MASK                                        = $000000ff;
const   NV2A_TX_WRAP_S_REPEAT                                     = $00000001;
const   NV2A_TX_WRAP_S_MIRRORED_REPEAT                            = $00000002;
const   NV2A_TX_WRAP_S_CLAMP_TO_EDGE                              = $00000003;
const   NV2A_TX_WRAP_S_CLAMP_TO_BORDER                            = $00000004;
const   NV2A_TX_WRAP_S_CLAMP                                      = $00000005;
const  NV2A_TX_WRAP_T_SHIFT                                       = 8;
const  NV2A_TX_WRAP_T_MASK                                        = $00000f00;
const   NV2A_TX_WRAP_T_REPEAT                                     = $00000100;
const   NV2A_TX_WRAP_T_MIRRORED_REPEAT                            = $00000200;
const   NV2A_TX_WRAP_T_CLAMP_TO_EDGE                              = $00000300;
const   NV2A_TX_WRAP_T_CLAMP_TO_BORDER                            = $00000400;
const   NV2A_TX_WRAP_T_CLAMP                                      = $00000500;
const  NV2A_TX_WRAP_R_SHIFT                                       = 16;
const  NV2A_TX_WRAP_R_MASK                                        = $000f0000;
const   NV2A_TX_WRAP_R_REPEAT                                     = $00010000;
const   NV2A_TX_WRAP_R_MIRRORED_REPEAT                            = $00020000;
const   NV2A_TX_WRAP_R_CLAMP_TO_EDGE                              = $00030000;
const   NV2A_TX_WRAP_R_CLAMP_TO_BORDER                            = $00040000;
const   NV2A_TX_WRAP_R_CLAMP                                      = $00050000;
//const NV2A_TX_ENABLE(x)                                         = ($00001b0c+((x)*64));
const NV2A_TX_ENABLE__0                                           = ($00001b0c+((0)*64)); // Dxbx
const NV2A_TX_ENABLE__1                                           = ($00001b0c+((1)*64)); // Dxbx
const NV2A_TX_ENABLE__2                                           = ($00001b0c+((2)*64)); // Dxbx
const NV2A_TX_ENABLE__3                                           = ($00001b0c+((3)*64)); // Dxbx
const NV2A_TX_ENABLE__SIZE                                        = $00000004;
const  NV2A_TX_ENABLE_ANISO_SHIFT                                 = 4;
const  NV2A_TX_ENABLE_ANISO_MASK                                  = $00000030;
const   NV2A_TX_ENABLE_ANISO_NONE                                 = $00000000;
const   NV2A_TX_ENABLE_ANISO_2X                                   = $00000010;
const   NV2A_TX_ENABLE_ANISO_4X                                   = $00000020;
const   NV2A_TX_ENABLE_ANISO_8X                                   = $00000030;
const  NV2A_TX_ENABLE_MIPMAP_MAX_LOD_SHIFT                        = 14;
const  NV2A_TX_ENABLE_MIPMAP_MAX_LOD_MASK                         = $0003c000;
const  NV2A_TX_ENABLE_MIPMAP_MIN_LOD_SHIFT                        = 26;
const  NV2A_TX_ENABLE_MIPMAP_MIN_LOD_MASK                         = $3c000000;
const  NV2A_TX_ENABLE_ENABLE                                      = (1 shl 30);
//const NV2A_TX_NPOT_PITCH(x)                                     = ($00001b10+((x)*64));
const NV2A_TX_NPOT_PITCH__SIZE                                    = $00000004;
const  NV2A_TX_NPOT_PITCH_PITCH_SHIFT                             = 16;
const  NV2A_TX_NPOT_PITCH_PITCH_MASK                              = $ffff0000;
//const NV2A_TX_FILTER(x)                                         = ($00001b14+((x)*64));
const NV2A_TX_FILTER__SIZE                                        = $00000004;
const  NV2A_TX_FILTER_LOD_BIAS_SHIFT                              = 8;
const  NV2A_TX_FILTER_LOD_BIAS_MASK                               = $00000f00;
const  NV2A_TX_FILTER_MINIFY_SHIFT                                = 16;
const  NV2A_TX_FILTER_MINIFY_MASK                                 = $000f0000;
const   NV2A_TX_FILTER_MINIFY_NEAREST                             = $00010000;
const   NV2A_TX_FILTER_MINIFY_LINEAR                              = $00020000;
const   NV2A_TX_FILTER_MINIFY_NEAREST_MIPMAP_NEAREST              = $00030000;
const   NV2A_TX_FILTER_MINIFY_LINEAR_MIPMAP_NEAREST               = $00040000;
const   NV2A_TX_FILTER_MINIFY_NEAREST_MIPMAP_LINEAR               = $00050000;
const   NV2A_TX_FILTER_MINIFY_LINEAR_MIPMAP_LINEAR                = $00060000;
const  NV2A_TX_FILTER_MAGNIFY_SHIFT                               = 24;
const  NV2A_TX_FILTER_MAGNIFY_MASK                                = $0f000000;
const   NV2A_TX_FILTER_MAGNIFY_NEAREST                            = $01000000;
const   NV2A_TX_FILTER_MAGNIFY_LINEAR                             = $02000000;
//const NV2A_TX_NPOT_SIZE(x)                                      = ($00001b1c+((x)*64));
const NV2A_TX_NPOT_SIZE__0                                        = ($00001b1c+((0)*64)); // Dxbx
const NV2A_TX_NPOT_SIZE__SIZE                                     = $00000004;
const  NV2A_TX_NPOT_SIZE_H_SHIFT                                  = 0;
const  NV2A_TX_NPOT_SIZE_H_MASK                                   = $0000ffff;
const  NV2A_TX_NPOT_SIZE_W_SHIFT                                  = 16;
const  NV2A_TX_NPOT_SIZE_W_MASK                                   = $ffff0000;
//const NV2A_TX_PALETTE_OFFSET(x)                                 = ($00001b20+((x)*64));
const NV2A_TX_PALETTE_OFFSET__SIZE                                = $00000004;
//const NV2A_TX_BORDER_COLOR(x)                                   = ($00001b24+((x)*64));
const NV2A_TX_BORDER_COLOR__SIZE                                  = $00000004;
const  NV2A_TX_BORDER_COLOR_B_SHIFT                               = 0;
const  NV2A_TX_BORDER_COLOR_B_MASK                                = $000000ff;
const  NV2A_TX_BORDER_COLOR_G_SHIFT                               = 8;
const  NV2A_TX_BORDER_COLOR_G_MASK                                = $0000ff00;
const  NV2A_TX_BORDER_COLOR_R_SHIFT                               = 16;
const  NV2A_TX_BORDER_COLOR_R_MASK                                = $00ff0000;
const  NV2A_TX_BORDER_COLOR_A_SHIFT                               = 24;
const  NV2A_TX_BORDER_COLOR_A_MASK                                = $ff000000;
//const NV2A_TX_SHADER_OFFSET_MATRIX00(x)                         = ($00001b28+((x)*64));
const NV2A_TX_SHADER_OFFSET_MATRIX00__SIZE                        = $00000004;
//const NV2A_TX_SHADER_OFFSET_MATRIX01(x)                         = ($00001b2c+((x)*64));
const NV2A_TX_SHADER_OFFSET_MATRIX01__SIZE                        = $00000004;
//const NV2A_TX_SHADER_OFFSET_MATRIX11(x)                         = ($00001b30+((x)*64));
const NV2A_TX_SHADER_OFFSET_MATRIX11__SIZE                        = $00000004;
//const NV2A_TX_SHADER_OFFSET_MATRIX10(x)                         = ($00001b34+((x)*64));
const NV2A_TX_SHADER_OFFSET_MATRIX10__SIZE                        = $00000004;
//const NV2A_TX_SHADER_OFFSET_SCALE(x)                            = ($00001b38+((x)*64)); // Dxbx
const NV2A_TX_SHADER_OFFSET_SCALE__SIZE                           = $00000004; // Dxbx
//const NV2A_TX_SHADER_OFFSET_OFFSET(x)                           = ($00001b3c+((x)*64)); // Dxbx
const NV2A_TX_SHADER_OFFSET_OFFSET__SIZE                          = $00000004; // Dxbx
const NV2A_SEMAPHORE_OFFSET                                       = $00001d6c; // Dxbx
const NV2A_WRITE_SEMAPHORE_RELEASE                                = $00001d70; // Dxbx
const NV2A_DEPTHCLIPCONTROL                                       = $00001d78; // Dxbx
const  NV2A_DEPTHCLIPCONTROL_CLAMP_SHIFT                          = 4;         // Dxbx
const  NV2A_DEPTHCLIPCONTROL_CLAMP_MASK                           = $000000f0; // Dxbx
const NV2A_MULTISAMPLE_CONTROL                                    = $00001d7c;
const NV2A_COMPRESS_ZBUFFER_EN                                    = $00001d80; // Dxbx
const NV2A_OCCLUDE_ZSTENCIL_EN                                    = $00001d84; // Dxbx
const NV2A_CLEAR_DEPTH_VALUE                                      = $00001d8c;
const NV2A_CLEAR_VALUE                                            = $00001d90;
const NV2A_CLEAR_BUFFERS                                          = $00001d94;
const  NV2A_CLEAR_BUFFERS_COLOR_A                                 = (1 shl  7);
const  NV2A_CLEAR_BUFFERS_COLOR_B                                 = (1 shl  6);
const  NV2A_CLEAR_BUFFERS_COLOR_G                                 = (1 shl  5);
const  NV2A_CLEAR_BUFFERS_COLOR_R                                 = (1 shl  4);
const  NV2A_CLEAR_BUFFERS_STENCIL                                 = (1 shl  1);
const  NV2A_CLEAR_BUFFERS_DEPTH                                   = (1 shl  0);
const NV2A_CLEAR_RECT_HORIZONTAL                                  = $00001d98; // Dxbx
const NV2A_CLEAR_RECT_VERTICAL                                    = $00001d9c; // Dxbx
const NV2A_RC_COLOR0                                              = $00001e20;
const  NV2A_RC_COLOR0_B_SHIFT                                     = 0;
const  NV2A_RC_COLOR0_B_MASK                                      = $000000ff;
const  NV2A_RC_COLOR0_G_SHIFT                                     = 8;
const  NV2A_RC_COLOR0_G_MASK                                      = $0000ff00;
const  NV2A_RC_COLOR0_R_SHIFT                                     = 16;
const  NV2A_RC_COLOR0_R_MASK                                      = $00ff0000;
const  NV2A_RC_COLOR0_A_SHIFT                                     = 24;
const  NV2A_RC_COLOR0_A_MASK                                      = $ff000000;
const NV2A_RC_COLOR1                                              = $00001e24;
const  NV2A_RC_COLOR1_B_SHIFT                                     = 0;
const  NV2A_RC_COLOR1_B_MASK                                      = $000000ff;
const  NV2A_RC_COLOR1_G_SHIFT                                     = 8;
const  NV2A_RC_COLOR1_G_MASK                                      = $0000ff00;
const  NV2A_RC_COLOR1_R_SHIFT                                     = 16;
const  NV2A_RC_COLOR1_R_MASK                                      = $00ff0000;
const  NV2A_RC_COLOR1_A_SHIFT                                     = 24;
const  NV2A_RC_COLOR1_A_MASK                                      = $ff000000;
//const NV2A_BACK_MATERIAL_SHININESS(x)                           = ($00001e28+((x)*4));
const NV2A_BACK_MATERIAL_SHININESS__SIZE                          = $00000006;
//const NV2A_RC_OUT_RGB(x)                                        = ($00001e40+((x)*4));
const NV2A_RC_OUT_RGB__SIZE                                       = $00000008;
const  NV2A_RC_OUT_RGB_CD_OUTPUT_SHIFT                            = 0;
const  NV2A_RC_OUT_RGB_CD_OUTPUT_MASK                             = $0000000f;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_ZERO                            = $00000000;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_CONSTANT_COLOR0                 = $00000001;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_CONSTANT_COLOR1                 = $00000002;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_FOG                             = $00000003;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_PRIMARY_COLOR                   = $00000004;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_SECONDARY_COLOR                 = $00000005;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_TEXTURE0                        = $00000008;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_TEXTURE1                        = $00000009;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_SPARE0                          = $0000000c;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_SPARE1                          = $0000000d;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR     = $0000000e;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_E_TIMES_F                       = $0000000f;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_TEXTURE2                        = $0000000a;
const   NV2A_RC_OUT_RGB_CD_OUTPUT_TEXTURE3                        = $0000000b;
const  NV2A_RC_OUT_RGB_AB_OUTPUT_SHIFT                            = 4;
const  NV2A_RC_OUT_RGB_AB_OUTPUT_MASK                             = $000000f0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_ZERO                            = $00000000;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_CONSTANT_COLOR0                 = $00000010;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_CONSTANT_COLOR1                 = $00000020;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_FOG                             = $00000030;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_PRIMARY_COLOR                   = $00000040;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_SECONDARY_COLOR                 = $00000050;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_TEXTURE0                        = $00000080;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_TEXTURE1                        = $00000090;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_SPARE0                          = $000000c0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_SPARE1                          = $000000d0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR     = $000000e0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_E_TIMES_F                       = $000000f0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_TEXTURE2                        = $000000a0;
const   NV2A_RC_OUT_RGB_AB_OUTPUT_TEXTURE3                        = $000000b0;
const  NV2A_RC_OUT_RGB_SUM_OUTPUT_SHIFT                           = 8;
const  NV2A_RC_OUT_RGB_SUM_OUTPUT_MASK                            = $00000f00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_ZERO                           = $00000000;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_CONSTANT_COLOR0                = $00000100;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_CONSTANT_COLOR1                = $00000200;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_FOG                            = $00000300;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_PRIMARY_COLOR                  = $00000400;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_SECONDARY_COLOR                = $00000500;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_TEXTURE0                       = $00000800;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_TEXTURE1                       = $00000900;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_SPARE0                         = $00000c00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_SPARE1                         = $00000d00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_SPARE0_PLUS_SECONDARY_COLOR    = $00000e00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_E_TIMES_F                      = $00000f00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_TEXTURE2                       = $00000a00;
const   NV2A_RC_OUT_RGB_SUM_OUTPUT_TEXTURE3                       = $00000b00;
const  NV2A_RC_OUT_RGB_CD_DOT_PRODUCT                             = (1 shl 12);
const  NV2A_RC_OUT_RGB_AB_DOT_PRODUCT                             = (1 shl 13);
const  NV2A_RC_OUT_RGB_MUX_SUM                                    = (1 shl 14);
const  NV2A_RC_OUT_RGB_BIAS                                       = (1 shl 15);
const   NV2A_RC_OUT_RGB_BIAS_NONE                                 = $00000000;
const   NV2A_RC_OUT_RGB_BIAS_BIAS_BY_NEGATIVE_ONE_HALF            = $00008000;
const  NV2A_RC_OUT_RGB_SCALE_SHIFT                                = 16;
const  NV2A_RC_OUT_RGB_SCALE_MASK                                 = $00030000;
const   NV2A_RC_OUT_RGB_SCALE_NONE                                = $00000000;
const   NV2A_RC_OUT_RGB_SCALE_SCALE_BY_TWO                        = $00010000;
const   NV2A_RC_OUT_RGB_SCALE_SCALE_BY_FOUR                       = $00020000;
const   NV2A_RC_OUT_RGB_SCALE_SCALE_BY_ONE_HALF                   = $00030000;
const NV2A_RC_ENABLE                                              = $00001e60;
const  NV2A_RC_ENABLE_NUM_COMBINERS_SHIFT                         = 0;
const  NV2A_RC_ENABLE_NUM_COMBINERS_MASK                          = $0000000f;
const NV2A_SHADOW_ZSLOPE_THRESHOLD                                = $00001e68; // Dxbx
const NV2A_TX_RCOMP                                               = $00001e6c;
const  NV2A_TX_RCOMP_NEVER                                        = $00000000;
const  NV2A_TX_RCOMP_GREATER                                      = $00000001;
const  NV2A_TX_RCOMP_EQUAL                                        = $00000002;
const  NV2A_TX_RCOMP_GEQUAL                                       = $00000003;
const  NV2A_TX_RCOMP_LESS                                         = $00000004;
const  NV2A_TX_RCOMP_NOTEQUAL                                     = $00000005;
const  NV2A_TX_RCOMP_LEQUAL                                       = $00000006;
const  NV2A_TX_RCOMP_ALWAYS                                       = $00000007;
const NV2A_TX_SHADER_OP                                           = $00001e70;
const  NV2A_TX_SHADER_OP_TX0_SHIFT                                = 0;
const  NV2A_TX_SHADER_OP_TX0_MASK                                 = $0000001f;
const   NV2A_TX_SHADER_OP_TX0_NONE                                = $00000000;
const   NV2A_TX_SHADER_OP_TX0_TEXTURE_2D                          = $00000001;
const   NV2A_TX_SHADER_OP_TX0_PASS_THROUGH                        = $00000004;
const   NV2A_TX_SHADER_OP_TX0_CULL_FRAGMENT                       = $00000005;
const   NV2A_TX_SHADER_OP_TX0_OFFSET_TEXTURE_2D                   = $00000006;
const   NV2A_TX_SHADER_OP_TX0_DOT_PRODUCT_TEXTURE_2D              = $00000009;
const   NV2A_TX_SHADER_OP_TX0_DOT_PRODUCT_DEPTH_REPLACE           = $0000000a;
const   NV2A_TX_SHADER_OP_TX0_DEPENDANT_AR_TEXTURE_2D             = $0000000f;
const   NV2A_TX_SHADER_OP_TX0_DEPENDANT_GB_TEXTURE_2D             = $00000010;
const   NV2A_TX_SHADER_OP_TX0_DOT_PRODUCT                         = $00000011;
const  NV2A_TX_SHADER_OP_TX1_SHIFT                                = 5;
const  NV2A_TX_SHADER_OP_TX1_MASK                                 = $000003e0;
const   NV2A_TX_SHADER_OP_TX1_NONE                                = $00000000;
const   NV2A_TX_SHADER_OP_TX1_TEXTURE_2D                          = $00000020;
const   NV2A_TX_SHADER_OP_TX1_PASS_THROUGH                        = $00000080;
const   NV2A_TX_SHADER_OP_TX1_CULL_FRAGMENT                       = $000000a0;
const   NV2A_TX_SHADER_OP_TX1_OFFSET_TEXTURE_2D                   = $000000c0;
const   NV2A_TX_SHADER_OP_TX1_DOT_PRODUCT_TEXTURE_2D              = $00000120;
const   NV2A_TX_SHADER_OP_TX1_DOT_PRODUCT_DEPTH_REPLACE           = $00000140;
const   NV2A_TX_SHADER_OP_TX1_DEPENDANT_AR_TEXTURE_2D             = $000001e0;
const   NV2A_TX_SHADER_OP_TX1_DEPENDANT_GB_TEXTURE_2D             = $00000200;
const   NV2A_TX_SHADER_OP_TX1_DOT_PRODUCT                         = $00000220;
const  NV2A_TX_SHADER_OP_TX2_SHIFT                                = 10;
const  NV2A_TX_SHADER_OP_TX2_MASK                                 = $00007c00;
const   NV2A_TX_SHADER_OP_TX2_NONE                                = $00000000;
const   NV2A_TX_SHADER_OP_TX2_TEXTURE_2D                          = $00000400;
const   NV2A_TX_SHADER_OP_TX2_PASS_THROUGH                        = $00001000;
const   NV2A_TX_SHADER_OP_TX2_CULL_FRAGMENT                       = $00001400;
const   NV2A_TX_SHADER_OP_TX2_OFFSET_TEXTURE_2D                   = $00001800;
const   NV2A_TX_SHADER_OP_TX2_DOT_PRODUCT_TEXTURE_2D              = $00002400;
const   NV2A_TX_SHADER_OP_TX2_DOT_PRODUCT_DEPTH_REPLACE           = $00002800;
const   NV2A_TX_SHADER_OP_TX2_DEPENDANT_AR_TEXTURE_2D             = $00003c00;
const   NV2A_TX_SHADER_OP_TX2_DEPENDANT_GB_TEXTURE_2D             = $00004000;
const   NV2A_TX_SHADER_OP_TX2_DOT_PRODUCT                         = $00004400;
const  NV2A_TX_SHADER_OP_TX3_SHIFT                                = 15;
const  NV2A_TX_SHADER_OP_TX3_MASK                                 = $000f8000;
const   NV2A_TX_SHADER_OP_TX3_NONE                                = $00000000;
const   NV2A_TX_SHADER_OP_TX3_TEXTURE_2D                          = $00008000;
const   NV2A_TX_SHADER_OP_TX3_PASS_THROUGH                        = $00020000;
const   NV2A_TX_SHADER_OP_TX3_CULL_FRAGMENT                       = $00028000;
const   NV2A_TX_SHADER_OP_TX3_OFFSET_TEXTURE_2D                   = $00030000;
const   NV2A_TX_SHADER_OP_TX3_DOT_PRODUCT_TEXTURE_2D              = $00048000;
const   NV2A_TX_SHADER_OP_TX3_DOT_PRODUCT_DEPTH_REPLACE           = $00050000;
const   NV2A_TX_SHADER_OP_TX3_DEPENDANT_AR_TEXTURE_2D             = $00078000;
const   NV2A_TX_SHADER_OP_TX3_DEPENDANT_GB_TEXTURE_2D             = $00080000;
const   NV2A_TX_SHADER_OP_TX3_DOT_PRODUCT                         = $00088000;
const NV2A_TX_SHADER_DOTMAPPING                                   = $00001e74;
const  NV2A_TX_SHADER_DOTMAPPING_TX0_SHIFT                        = 0;
const  NV2A_TX_SHADER_DOTMAPPING_TX0_MASK                         = $0000000f;
const  NV2A_TX_SHADER_DOTMAPPING_TX1_SHIFT                        = 4;
const  NV2A_TX_SHADER_DOTMAPPING_TX1_MASK                         = $000000f0;
const  NV2A_TX_SHADER_DOTMAPPING_TX2_SHIFT                        = 8;
const  NV2A_TX_SHADER_DOTMAPPING_TX2_MASK                         = $00000f00;
const  NV2A_TX_SHADER_DOTMAPPING_TX3_SHIFT                        = 12;
const  NV2A_TX_SHADER_DOTMAPPING_TX3_MASK                         = $0000f000;
const NV2A_TX_SHADER_PREVIOUS                                     = $00001e78;
const  NV2A_TX_SHADER_PREVIOUS_TX0_SHIFT                          = 8;
const  NV2A_TX_SHADER_PREVIOUS_TX0_MASK                           = $00000f00;
const  NV2A_TX_SHADER_PREVIOUS_TX1_SHIFT                          = 12;
const  NV2A_TX_SHADER_PREVIOUS_TX1_MASK                           = $0000f000;
const  NV2A_TX_SHADER_PREVIOUS_TX2_SHIFT                          = 16;
const  NV2A_TX_SHADER_PREVIOUS_TX2_MASK                           = $00030000;
const  NV2A_TX_SHADER_PREVIOUS_TX3_SHIFT                          = 20;
const  NV2A_TX_SHADER_PREVIOUS_TX3_MASK                           = $00300000;
const NV2A_ENGINE                                                 = $00001e94;
const  NV2A_ENGINE_VP                                             = (1 shl  1);
const  NV2A_ENGINE_FIXED                                          = (1 shl  2);
const NV2A_TRANSFORM_PROGRAM_CXT_WRITE_EN                         = $00001e98;
const NV2A_VP_UPLOAD_FROM_ID                                      = $00001e9c;
const NV2A_VP_START_FROM_ID                                       = $00001ea0;
const NV2A_VP_UPLOAD_CONST_ID                                     = $00001ea4;

const NV2A_Max = NV2A_VP_UPLOAD_CONST_ID;

//
// From here on, it's Dxbx code again :
//

const
  // This declaration contains the above constants, but in a more compact form.
  // It's is decoded by InitNV2AInfo into a lookup-table for string-conversions.
  CompactNV2AInfo: array [0..317] of record
    Method: Integer;
    Name: string;
    Pitch: Integer; // Default 0 means 4
    Count: Integer; // Default 0 means 1
  end = (
  (Method:$00000100; Name:'NV2A_NOP'), // Parameter must be zero
  (Method:$00000104; Name:'NV2A_NOTIFY'),
  (Method:$00000110; Name:'NV2A_WAIT_FOR_IDLE'), // Dxbx
  (Method:$00000120; Name:'NV2A_FLIP_READ'),
  (Method:$00000124; Name:'NV2A_FLIP_WRITE'),
  (Method:$00000128; Name:'NV2A_FLIP_MODULO'),
  (Method:$0000012c; Name:'NV2A_FLIP_INCREMENT_WRITE'),
  (Method:$00000130; Name:'NV2A_FLIP_STALL'),
  (Method:$00000180; Name:'NV2A_DMA_NOTIFY'),
  (Method:$00000184; Name:'NV2A_DMA_TEXTURE0'),
  (Method:$00000188; Name:'NV2A_DMA_TEXTURE1'),
  (Method:$00000190; Name:'NV2A_DMA_STATE'),
  (Method:$00000194; Name:'NV2A_DMA_COLOR'),
  (Method:$00000198; Name:'NV2A_DMA_ZETA'),
  (Method:$0000019c; Name:'NV2A_DMA_VTXBUF0'),
  (Method:$000001a0; Name:'NV2A_DMA_VTXBUF1'),
  (Method:$000001a4; Name:'NV2A_DMA_FENCE'),
  (Method:$000001a8; Name:'NV2A_DMA_QUERY'),
  (Method:$00000200; Name:'NV2A_RT_HORIZ'),
  (Method:$00000204; Name:'NV2A_RT_VERT'),
  (Method:$00000208; Name:'NV2A_RT_FORMAT'),
  (Method:$0000020c; Name:'NV2A_RT_PITCH'),
  (Method:$00000210; Name:'NV2A_COLOR_OFFSET'),
  (Method:$00000214; Name:'NV2A_ZETA_OFFSET'),
  (Method:$00000260; Name:'NV2A_RC_IN_ALPHA(x)'; Count:NV2A_RC_IN_ALPHA__SIZE),
  (Method:$00000288; Name:'NV2A_RC_FINAL0'),
  (Method:$0000028c; Name:'NV2A_RC_FINAL1'),
  (Method:$00000290; Name:'NV2A_CONTROL0'),
  (Method:$00000294; Name:'NV2A_LIGHT_MODEL'),
  (Method:$00000298; Name:'NV2A_COLOR_MATERIAL'),
  (Method:$0000029c; Name:'NV2A_FOG_MODE'),
  (Method:$000002a0; Name:'NV2A_FOG_COORD'),
  (Method:$000002a4; Name:'NV2A_FOG_ENABLE'),
  (Method:$000002a8; Name:'NV2A_FOG_COLOR'),
  (Method:$000002b4; Name:'NV2A_VIEWPORT_CLIP_MODE'),
  (Method:$000002c0; Name:'NV2A_VIEWPORT_CLIP_HORIZ(x)'; Count:NV2A_VIEWPORT_CLIP_HORIZ__SIZE),
  (Method:$000002e0; Name:'NV2A_VIEWPORT_CLIP_VERT(x)'; Count:NV2A_VIEWPORT_CLIP_VERT__SIZE),
  (Method:$00000300; Name:'NV2A_ALPHA_FUNC_ENABLE'),
  (Method:$00000304; Name:'NV2A_BLEND_FUNC_ENABLE'),
  (Method:$00000308; Name:'NV2A_CULL_FACE_ENABLE'),
  (Method:$0000030c; Name:'NV2A_DEPTH_TEST_ENABLE'),
  (Method:$00000310; Name:'NV2A_DITHER_ENABLE'),
  (Method:$00000314; Name:'NV2A_LIGHTING_ENABLE'),
  (Method:$00000318; Name:'NV2A_POINT_PARAMETERS_ENABLE'),
  (Method:$0000031c; Name:'NV2A_POINT_SMOOTH_ENABLE'),
  (Method:$00000320; Name:'NV2A_LINE_SMOOTH_ENABLE'),
  (Method:$00000324; Name:'NV2A_POLYGON_SMOOTH_ENABLE'),
  (Method:$00000328; Name:'NV2A_SKIN_MODE'),
  (Method:$0000032c; Name:'NV2A_STENCIL_ENABLE'),
  (Method:$00000330; Name:'NV2A_POLYGON_OFFSET_POINT_ENABLE'),
  (Method:$00000334; Name:'NV2A_POLYGON_OFFSET_LINE_ENABLE'),
  (Method:$00000338; Name:'NV2A_POLYGON_OFFSET_FILL_ENABLE'),
  (Method:$0000033c; Name:'NV2A_ALPHA_FUNC_FUNC'),
  (Method:$00000340; Name:'NV2A_ALPHA_FUNC_REF'),
  (Method:$00000344; Name:'NV2A_BLEND_FUNC_SRC'),
  (Method:$00000348; Name:'NV2A_BLEND_FUNC_DST'),
  (Method:$0000034c; Name:'NV2A_BLEND_COLOR'),
  (Method:$00000350; Name:'NV2A_BLEND_EQUATION'),
  (Method:$00000354; Name:'NV2A_DEPTH_FUNC'),
  (Method:$00000358; Name:'NV2A_COLOR_MASK'),
  (Method:$0000035c; Name:'NV2A_DEPTH_WRITE_ENABLE'),
  (Method:$00000360; Name:'NV2A_STENCIL_MASK'),
  (Method:$00000364; Name:'NV2A_STENCIL_FUNC_FUNC'),
  (Method:$00000368; Name:'NV2A_STENCIL_FUNC_REF'),
  (Method:$0000036c; Name:'NV2A_STENCIL_FUNC_MASK'),
  (Method:$00000370; Name:'NV2A_STENCIL_OP_FAIL'),
  (Method:$00000374; Name:'NV2A_STENCIL_OP_ZFAIL'),
  (Method:$00000378; Name:'NV2A_STENCIL_OP_ZPASS'),
  (Method:$0000037c; Name:'NV2A_SHADE_MODEL'),
  (Method:$00000380; Name:'NV2A_LINE_WIDTH'),
  (Method:$00000384; Name:'NV2A_POLYGON_OFFSET_FACTOR'),
  (Method:$00000388; Name:'NV2A_POLYGON_OFFSET_UNITS'),
  (Method:$0000038c; Name:'NV2A_POLYGON_MODE_FRONT'),
  (Method:$00000390; Name:'NV2A_POLYGON_MODE_BACK'),
  (Method:$00000394; Name:'NV2A_DEPTH_RANGE_NEAR'),
  (Method:$00000398; Name:'NV2A_DEPTH_RANGE_FAR'),
  (Method:$0000039c; Name:'NV2A_CULL_FACE'),
  (Method:$000003a0; Name:'NV2A_FRONT_FACE'),
  (Method:$000003a4; Name:'NV2A_NORMALIZE_ENABLE'),
  (Method:$000003a8; Name:'NV2A_MATERIAL_FACTOR_FRONT_R'),
  (Method:$000003ac; Name:'NV2A_MATERIAL_FACTOR_FRONT_G'),
  (Method:$000003b0; Name:'NV2A_MATERIAL_FACTOR_FRONT_B'),
  (Method:$000003b4; Name:'NV2A_MATERIAL_FACTOR_FRONT_A'),
  (Method:$000003b8; Name:'NV2A_SEPARATE_SPECULAR_ENABLE'),
  (Method:$000003bc; Name:'NV2A_ENABLED_LIGHTS'),
  (Method:$000003c0; Name:'NV2A_TX_GEN_MODE_S(x)'; Pitch:16; Count:NV2A_TX_GEN_MODE_S__SIZE),
  (Method:$000003c4; Name:'NV2A_TX_GEN_MODE_T(x)'; Pitch:16; Count:NV2A_TX_GEN_MODE_T__SIZE),
  (Method:$000003c8; Name:'NV2A_TX_GEN_MODE_R(x)'; Pitch:16; Count:NV2A_TX_GEN_MODE_R__SIZE),
  (Method:$000003cc; Name:'NV2A_TX_GEN_MODE_Q(x)'; Pitch:16; Count:NV2A_TX_GEN_MODE_Q__SIZE),
  (Method:$00000420; Name:'NV2A_TX_MATRIX_ENABLE(x)'; Count:NV2A_TX_MATRIX_ENABLE__SIZE),
  (Method:$0000043c; Name:'NV2A_POINT_SIZE'),
  (Method:$00000440; Name:'NV2A_PROJECTION_MATRIX(x)'; Count:NV2A_PROJECTION_MATRIX__SIZE),
  (Method:$00000480; Name:'NV2A_MODELVIEW0_MATRIX(x)'; Count:NV2A_MODELVIEW0_MATRIX__SIZE),
  (Method:$000004c0; Name:'NV2A_MODELVIEW1_MATRIX(x)'; Count:NV2A_MODELVIEW1_MATRIX__SIZE),
  (Method:$00000500; Name:'NV2A_MODELVIEW2_MATRIX(x)'; Count:NV2A_MODELVIEW2_MATRIX__SIZE),
  (Method:$00000540; Name:'NV2A_MODELVIEW3_MATRIX(x)'; Count:NV2A_MODELVIEW3_MATRIX__SIZE),
  (Method:$00000580; Name:'NV2A_INVERSE_MODELVIEW0_MATRIX(x)'; Count:NV2A_INVERSE_MODELVIEW0_MATRIX__SIZE),
  (Method:$000005c0; Name:'NV2A_INVERSE_MODELVIEW1_MATRIX(x)'; Count:NV2A_INVERSE_MODELVIEW1_MATRIX__SIZE),
  (Method:$00000600; Name:'NV2A_INVERSE_MODELVIEW2_MATRIX(x)'; Count:NV2A_INVERSE_MODELVIEW2_MATRIX__SIZE),
  (Method:$00000640; Name:'NV2A_INVERSE_MODELVIEW3_MATRIX(x)'; Count:NV2A_INVERSE_MODELVIEW3_MATRIX__SIZE),
  (Method:$00000680; Name:'NV2A_COMPOSITE_MATRIX(x)'; Count:NV2A_COMPOSITE_MATRIX__SIZE),
  (Method:$000006c0; Name:'NV2A_TX0_MATRIX(x)'; Count:NV2A_TX0_MATRIX__SIZE),
  (Method:$00000700; Name:'NV2A_TX1_MATRIX(x)'; Count:NV2A_TX1_MATRIX__SIZE),
  (Method:$00000740; Name:'NV2A_TX2_MATRIX(x)'; Count:NV2A_TX2_MATRIX__SIZE),
  (Method:$00000780; Name:'NV2A_TX3_MATRIX(x)'; Count:NV2A_TX3_MATRIX__SIZE),
  (Method:$00000840; Name:'NV2A_TX_GEN_COEFF_S_A(x)'; Pitch:64; Count:4),
  (Method:$00000844; Name:'NV2A_TX_GEN_COEFF_S_B(x)'; Pitch:64; Count:4),
  (Method:$00000848; Name:'NV2A_TX_GEN_COEFF_S_C(x)'; Pitch:64; Count:4),
  (Method:$0000084c; Name:'NV2A_TX_GEN_COEFF_S_D(x)'; Pitch:64; Count:4),
  (Method:$00000850; Name:'NV2A_TX_GEN_COEFF_T_A(x)'; Pitch:64; Count:4),
  (Method:$00000854; Name:'NV2A_TX_GEN_COEFF_T_B(x)'; Pitch:64; Count:4),
  (Method:$00000858; Name:'NV2A_TX_GEN_COEFF_T_C(x)'; Pitch:64; Count:4),
  (Method:$0000085c; Name:'NV2A_TX_GEN_COEFF_T_D(x)'; Pitch:64; Count:4),
  (Method:$00000860; Name:'NV2A_TX_GEN_COEFF_R_A(x)'; Pitch:64; Count:4),
  (Method:$00000864; Name:'NV2A_TX_GEN_COEFF_R_B(x)'; Pitch:64; Count:4),
  (Method:$00000868; Name:'NV2A_TX_GEN_COEFF_R_C(x)'; Pitch:64; Count:4),
  (Method:$0000086c; Name:'NV2A_TX_GEN_COEFF_R_D(x)'; Pitch:64; Count:4),
  (Method:$00000870; Name:'NV2A_TX_GEN_COEFF_Q_A(x)'; Pitch:64; Count:4),
  (Method:$00000874; Name:'NV2A_TX_GEN_COEFF_Q_B(x)'; Pitch:64; Count:4),
  (Method:$00000878; Name:'NV2A_TX_GEN_COEFF_Q_C(x)'; Pitch:64; Count:4),
  (Method:$0000087c; Name:'NV2A_TX_GEN_COEFF_Q_D(x)'; Pitch:64; Count:4),
  (Method:$000009c0; Name:'NV2A_FOG_EQUATION_CONSTANT'),
  (Method:$000009c4; Name:'NV2A_FOG_EQUATION_LINEAR'),
  (Method:$000009c8; Name:'NV2A_FOG_EQUATION_QUADRATIC'),
  (Method:$000009d0; Name:'NV2A_FOG_PLANE(x)'; Count:NV2A_FOG_PLANE__SIZE),
  (Method:$000009e0; Name:'NV2A_FRONT_MATERIAL_SHININESS(x)'; Count:NV2A_FRONT_MATERIAL_SHININESS__SIZE),
  (Method:$000009f8; Name:'NV2A_SWATH_WIDTH'),
  (Method:$000009fc; Name:'NV2A_FLAT_SHADE_OP'),
  (Method:$00000a10; Name:'NV2A_LIGHT_MODEL_FRONT_AMBIENT_R'),
  (Method:$00000a14; Name:'NV2A_LIGHT_MODEL_FRONT_AMBIENT_G'),
  (Method:$00000a18; Name:'NV2A_LIGHT_MODEL_FRONT_AMBIENT_B'),
  (Method:$00000a20; Name:'NV2A_VIEWPORT_TRANSLATE_X'),
  (Method:$00000a24; Name:'NV2A_VIEWPORT_TRANSLATE_Y'),
  (Method:$00000a28; Name:'NV2A_VIEWPORT_TRANSLATE_Z'),
  (Method:$00000a2c; Name:'NV2A_VIEWPORT_TRANSLATE_W'),
  (Method:$00000a30; Name:'NV2A_POINT_PARAMETER(x)'; Count:NV2A_POINT_PARAMETER__SIZE),
  (Method:$00000a50; Name:'NV2A_EYE_POSITION(x)'; Count:NV2A_EYE_POSITION__SIZE),
  (Method:$00000a60; Name:'NV2A_RC_CONSTANT_COLOR0(x)'; Count:NV2A_RC_CONSTANT_COLOR0__SIZE),
  (Method:$00000a80; Name:'NV2A_RC_CONSTANT_COLOR1(x)'; Count:NV2A_RC_CONSTANT_COLOR1__SIZE),
  (Method:$00000aa0; Name:'NV2A_RC_OUT_ALPHA(x)'; Count:NV2A_RC_OUT_ALPHA__SIZE),
  (Method:$00000ac0; Name:'NV2A_RC_IN_RGB(x)'; Count:NV2A_RC_IN_RGB__SIZE),
  (Method:$00000ae0; Name:'NV2A_COLOR_KEY_COLOR(x)'; Count:NV2A_COLOR_KEY_COLOR__SIZE),
  (Method:$00000af0; Name:'NV2A_VIEWPORT_SCALE_X'),
  (Method:$00000af4; Name:'NV2A_VIEWPORT_SCALE_Y'),
  (Method:$00000af8; Name:'NV2A_VIEWPORT_SCALE_Z'),
  (Method:$00000afc; Name:'NV2A_VIEWPORT_SCALE_W'),
  (Method:$00000b00; Name:'NV2A_VP_UPLOAD_INST(x)'; Count:NV2A_VP_UPLOAD_INST__SIZE),
  (Method:$00000b80; Name:'NV2A_VP_UPLOAD_CONST(x)'; Count:NV2A_VP_UPLOAD_CONST__SIZE), // Can't use NOINCREMENT_FLAG, maximum of 32 writes
  (Method:$00000c00; Name:'NV2A_LIGHT_BACK_AMBIENT_R(x)'; Pitch:64; Count:8),
  (Method:$00000c04; Name:'NV2A_LIGHT_BACK_AMBIENT_G(x)'; Pitch:64; Count:8),
  (Method:$00000c08; Name:'NV2A_LIGHT_BACK_AMBIENT_B(x)'; Pitch:64; Count:8),
  (Method:$00000c0c; Name:'NV2A_LIGHT_BACK_DIFFUSE_R(x)'; Pitch:64; Count:8),
  (Method:$00000c10; Name:'NV2A_LIGHT_BACK_DIFFUSE_G(x)'; Pitch:64; Count:8),
  (Method:$00000c14; Name:'NV2A_LIGHT_BACK_DIFFUSE_B(x)'; Pitch:64; Count:8),
  (Method:$00000c18; Name:'NV2A_LIGHT_BACK_SPECULAR_R(x)'; Pitch:64; Count:8),
  (Method:$00000c1c; Name:'NV2A_LIGHT_BACK_SPECULAR_G(x)'; Pitch:64; Count:8),
  (Method:$00000c20; Name:'NV2A_LIGHT_BACK_SPECULAR_B(x)'; Pitch:64; Count:8),
  (Method:$00001000; Name:'NV2A_LIGHT_FRONT_AMBIENT_R(x)'; Pitch:128; Count:8),
  (Method:$00001004; Name:'NV2A_LIGHT_FRONT_AMBIENT_G(x)'; Pitch:128; Count:8),
  (Method:$00001008; Name:'NV2A_LIGHT_FRONT_AMBIENT_B(x)'; Pitch:128; Count:8),
  (Method:$0000100c; Name:'NV2A_LIGHT_FRONT_DIFFUSE_R(x)'; Pitch:128; Count:8),
  (Method:$00001010; Name:'NV2A_LIGHT_FRONT_DIFFUSE_G(x)'; Pitch:128; Count:8),
  (Method:$00001014; Name:'NV2A_LIGHT_FRONT_DIFFUSE_B(x)'; Pitch:128; Count:8),
  (Method:$00001018; Name:'NV2A_LIGHT_FRONT_SPECULAR_R(x)'; Pitch:128; Count:8),
  (Method:$0000101c; Name:'NV2A_LIGHT_FRONT_SPECULAR_G(x)'; Pitch:128; Count:8),
  (Method:$00001020; Name:'NV2A_LIGHT_FRONT_SPECULAR_B(x)'; Pitch:128; Count:8),
  (Method:$00001028; Name:'NV2A_LIGHT_HALF_VECTOR_X(x)'; Pitch:128; Count:8),
  (Method:$0000102c; Name:'NV2A_LIGHT_HALF_VECTOR_Y(x)'; Pitch:128; Count:8),
  (Method:$00001030; Name:'NV2A_LIGHT_HALF_VECTOR_Z(x)'; Pitch:128; Count:8),
  (Method:$00001034; Name:'NV2A_LIGHT_DIRECTION_X(x)'; Pitch:128; Count:8),
  (Method:$00001038; Name:'NV2A_LIGHT_DIRECTION_Y(x)'; Pitch:128; Count:8),
  (Method:$0000103c; Name:'NV2A_LIGHT_DIRECTION_Z(x)'; Pitch:128; Count:8),
  (Method:$00001040; Name:'NV2A_LIGHT_SPOT_CUTOFF_A(x)'; Pitch:128; Count:8),
  (Method:$00001044; Name:'NV2A_LIGHT_SPOT_CUTOFF_B(x)'; Pitch:128; Count:8),
  (Method:$00001048; Name:'NV2A_LIGHT_SPOT_CUTOFF_C(x)'; Pitch:128; Count:8),
  (Method:$0000104c; Name:'NV2A_LIGHT_SPOT_DIR_X(x)'; Pitch:128; Count:8),
  (Method:$00001050; Name:'NV2A_LIGHT_SPOT_DIR_Y(x)'; Pitch:128; Count:8),
  (Method:$00001054; Name:'NV2A_LIGHT_SPOT_DIR_Z(x)'; Pitch:128; Count:8),
  (Method:$00001058; Name:'NV2A_LIGHT_SPOT_CUTOFF_D(x)'; Pitch:128; Count:8),
  (Method:$0000105c; Name:'NV2A_LIGHT_POSITION_X(x)'; Pitch:128; Count:8),
  (Method:$00001060; Name:'NV2A_LIGHT_POSITION_Y(x)'; Pitch:128; Count:8),
  (Method:$00001064; Name:'NV2A_LIGHT_POSITION_Z(x)'; Pitch:128; Count:8),
  (Method:$00001068; Name:'NV2A_LIGHT_ATTENUATION_CONSTANT(x)'; Pitch:128; Count:8),
  (Method:$0000106c; Name:'NV2A_LIGHT_ATTENUATION_LINEAR(x)'; Pitch:128; Count:8),
  (Method:$00001070; Name:'NV2A_LIGHT_ATTENUATION_QUADRATIC(x)'; Pitch:128; Count:8),
  (Method:$0000147c; Name:'NV2A_POLYGON_STIPPLE_ENABLE'),
  (Method:$00001480; Name:'NV2A_POLYGON_STIPPLE_PATTERN(x)'; Count:NV2A_POLYGON_STIPPLE_PATTERN__SIZE),
  (Method:$00001500; Name:'NV2A_VERTEX_POS_3F_X'),
  (Method:$00001504; Name:'NV2A_VERTEX_POS_3F_Y'),
  (Method:$00001508; Name:'NV2A_VERTEX_POS_3F_Z'),
  (Method:$00001518; Name:'NV2A_VERTEX_POS_4F_X'),
  (Method:$0000151c; Name:'NV2A_VERTEX_POS_4F_Y'),
  (Method:$00001520; Name:'NV2A_VERTEX_POS_4F_Z'),
  (Method:$00001528; Name:'NV2A_VERTEX_POS_3I_XY'),
  (Method:$0000152c; Name:'NV2A_VERTEX_POS_3I_Z'),
  (Method:$00001530; Name:'NV2A_VERTEX_NOR_3F_X'),
  (Method:$00001534; Name:'NV2A_VERTEX_NOR_3F_Y'),
  (Method:$00001538; Name:'NV2A_VERTEX_NOR_3F_Z'),
  (Method:$00001540; Name:'NV2A_VERTEX_NOR_3I_XY'),
  (Method:$00001544; Name:'NV2A_VERTEX_NOR_3I_Z'),
  (Method:$00001550; Name:'NV2A_VERTEX_COL_4F_X'),
  (Method:$00001554; Name:'NV2A_VERTEX_COL_4F_Y'),
  (Method:$00001558; Name:'NV2A_VERTEX_COL_4F_Z'),
  (Method:$0000155c; Name:'NV2A_VERTEX_COL_4F_W'),
  (Method:$00001560; Name:'NV2A_VERTEX_COL_3F_X'),
  (Method:$00001564; Name:'NV2A_VERTEX_COL_3F_Y'),
  (Method:$00001568; Name:'NV2A_VERTEX_COL_3F_Z'),
  (Method:$0000156c; Name:'NV2A_VERTEX_COL_4I'),
  (Method:$00001580; Name:'NV2A_VERTEX_COL2_3F_X'),
  (Method:$00001584; Name:'NV2A_VERTEX_COL2_3F_Y'),
  (Method:$00001588; Name:'NV2A_VERTEX_COL2_3F_Z'),
  (Method:$0000158c; Name:'NV2A_VERTEX_COL2_4I'),
  (Method:$00001590; Name:'NV2A_VERTEX_TX0_2F_S'),
  (Method:$00001594; Name:'NV2A_VERTEX_TX0_2F_T'),
  (Method:$00001598; Name:'NV2A_VERTEX_TX0_2I'),
  (Method:$000015a0; Name:'NV2A_VERTEX_TX0_4F_S'),
  (Method:$000015a4; Name:'NV2A_VERTEX_TX0_4F_T'),
  (Method:$000015a8; Name:'NV2A_VERTEX_TX0_4F_R'),
  (Method:$000015ac; Name:'NV2A_VERTEX_TX0_4F_Q'),
  (Method:$000015b0; Name:'NV2A_VERTEX_TX0_4I_ST'),
  (Method:$000015b4; Name:'NV2A_VERTEX_TX0_4I_RQ'),
  (Method:$000015b8; Name:'NV2A_VERTEX_TX1_2F_S'),
  (Method:$000015bc; Name:'NV2A_VERTEX_TX1_2F_T'),
  (Method:$000015c0; Name:'NV2A_VERTEX_TX1_2I'),
  (Method:$000015c8; Name:'NV2A_VERTEX_TX1_4F_S'),
  (Method:$000015cc; Name:'NV2A_VERTEX_TX1_4F_T'),
  (Method:$000015d0; Name:'NV2A_VERTEX_TX1_4F_R'),
  (Method:$000015d4; Name:'NV2A_VERTEX_TX1_4F_Q'),
  (Method:$000015d8; Name:'NV2A_VERTEX_TX1_4I_ST'),
  (Method:$000015dc; Name:'NV2A_VERTEX_TX1_4I_RQ'),
  (Method:$000015e0; Name:'NV2A_VERTEX_TX2_2F_S'),
  (Method:$000015e4; Name:'NV2A_VERTEX_TX2_2F_T'),
  (Method:$000015e8; Name:'NV2A_VERTEX_TX2_2I'),
  (Method:$000015f0; Name:'NV2A_VERTEX_TX2_4F_S'),
  (Method:$000015f4; Name:'NV2A_VERTEX_TX2_4F_T'),
  (Method:$000015f8; Name:'NV2A_VERTEX_TX2_4F_R'),
  (Method:$000015fc; Name:'NV2A_VERTEX_TX2_4F_Q'),
  (Method:$00001600; Name:'NV2A_VERTEX_TX2_4I_ST'),
  (Method:$00001604; Name:'NV2A_VERTEX_TX2_4I_RQ'),
  (Method:$00001608; Name:'NV2A_VERTEX_TX3_2F_S'),
  (Method:$0000160c; Name:'NV2A_VERTEX_TX3_2F_T'),
  (Method:$00001610; Name:'NV2A_VERTEX_TX3_2I'),
  (Method:$00001620; Name:'NV2A_VERTEX_TX3_4F_S'),
  (Method:$00001624; Name:'NV2A_VERTEX_TX3_4F_T'),
  (Method:$00001628; Name:'NV2A_VERTEX_TX3_4F_R'),
  (Method:$0000162c; Name:'NV2A_VERTEX_TX3_4F_Q'),
  (Method:$00001630; Name:'NV2A_VERTEX_TX3_4I_ST'),
  (Method:$00001634; Name:'NV2A_VERTEX_TX3_4I_RQ'),
  (Method:$00001698; Name:'NV2A_VERTEX_FOG_1F'),
  (Method:$000016bc; Name:'NV2A_EDGEFLAG_ENABLE'),
  (Method:$00001710; Name:'NV2A_VTX_CACHE_INVALIDATE'),
  (Method:$00001720; Name:'NV2A_VTXBUF_ADDRESS(x)'; Count:NV2A_VTXBUF_ADDRESS__SIZE),
  (Method:$00001760; Name:'NV2A_VTXFMT(x)'; Count:NV2A_VTXFMT__SIZE),
  (Method:$000017a0; Name:'NV2A_LIGHT_MODEL_BACK_AMBIENT_R'),
  (Method:$000017a4; Name:'NV2A_LIGHT_MODEL_BACK_AMBIENT_G'),
  (Method:$000017a8; Name:'NV2A_LIGHT_MODEL_BACK_AMBIENT_B'),
  (Method:$000017ac; Name:'NV2A_MATERIAL_FACTOR_BACK_A'),
  (Method:$000017b0; Name:'NV2A_MATERIAL_FACTOR_BACK_R'),
  (Method:$000017b4; Name:'NV2A_MATERIAL_FACTOR_BACK_G'),
  (Method:$000017b8; Name:'NV2A_MATERIAL_FACTOR_BACK_B'),
  (Method:$000017bc; Name:'NV2A_COLOR_LOGIC_OP_ENABLE'),
  (Method:$000017c0; Name:'NV2A_COLOR_LOGIC_OP_OP'),
  (Method:$000017c4; Name:'NV2A_LIGHT_MODEL_TWO_SIDE_ENABLE'),
  (Method:$000017f8; Name:'NV2A_TX_SHADER_CULL_MODE'),
  (Method:$000017fc; Name:'NV2A_VERTEX_BEGIN_END'), // Parameter is D3DPRIMITIVETYPE or 0 to end
  (Method:$00001800; Name:'NV2A_VB_ELEMENT_U16'),
  (Method:$00001808; Name:'NV2A_VB_ELEMENT_U32'),
  (Method:$00001810; Name:'NV2A_VB_VERTEX_BATCH'),
  (Method:$00001818; Name:'NV2A_VERTEX_DATA'), // Use NOINCREMENT_FLAG
  (Method:$0000181c; Name:'NV2A_TX_SHADER_CONST_EYE_X'),
  (Method:$00001820; Name:'NV2A_TX_SHADER_CONST_EYE_Y'),
  (Method:$00001824; Name:'NV2A_TX_SHADER_CONST_EYE_Z'),
  // Each VertexData type is indexed using X_D3DVSDE enums (POSITION,BLENDWEIGHT,NORMAL,DIFFUSE,
  // SPECULAR,FOG,POINT_SIZE,BACKDIFFUSE,BACKSPECULAR,TEXCOORD0,-1,-2,-3,?,?,?). The special
  // value 'X_D3DVSDE_VERTEX' marks the end of a vertex' data attributes.
  (Method:$00001880; Name:'NV2A_VERTEX_DATA2F(x)'; Pitch:8; Count:NV2A_VERTEX_DATA2F__SIZE),
  (Method:$00001900; Name:'NV2A_VERTEX_DATA2S(x)'; Count:NV2A_VERTEX_DATA2S__SIZE),
  (Method:$00001940; Name:'NV2A_VERTEX_DATA4UB(x)'; Count:NV2A_VERTEX_DATA4UB__SIZE),
  (Method:$00001980; Name:'NV2A_VERTEX_DATA4S(x)'; Pitch:8; Count:NV2A_VERTEX_DATA4S__SIZE),
  (Method:$00001a00; Name:'NV2A_VERTEX_DATA4F(x)'; Pitch:16; Count:NV2A_VERTEX_DATA4F__SIZE),
  (Method:$00001b00; Name:'NV2A_TX_OFFSET(x)'; Pitch:64; Count:NV2A_TX_OFFSET__SIZE),
  (Method:$00001b04; Name:'NV2A_TX_FORMAT(x)'; Pitch:64; Count:NV2A_TX_FORMAT__SIZE),
  (Method:$00001b08; Name:'NV2A_TX_WRAP(x)'; Pitch:64; Count:NV2A_TX_WRAP__SIZE),
  (Method:$00001b0c; Name:'NV2A_TX_ENABLE(x)'; Pitch:64; Count:NV2A_TX_ENABLE__SIZE),
  (Method:$00001b10; Name:'NV2A_TX_NPOT_PITCH(x)'; Pitch:64; Count:NV2A_TX_NPOT_PITCH__SIZE),
  (Method:$00001b14; Name:'NV2A_TX_FILTER(x)'; Pitch:64; Count:NV2A_TX_FILTER__SIZE),
  (Method:$00001b1c; Name:'NV2A_TX_NPOT_SIZE(x)'; Pitch:64; Count:NV2A_TX_NPOT_SIZE__SIZE),
  (Method:$00001b20; Name:'NV2A_TX_PALETTE_OFFSET(x)'; Pitch:64; Count:NV2A_TX_PALETTE_OFFSET__SIZE),
  (Method:$00001b24; Name:'NV2A_TX_BORDER_COLOR(x)'; Pitch:64; Count:NV2A_TX_BORDER_COLOR__SIZE),
  (Method:$00001b28; Name:'NV2A_TX_SHADER_OFFSET_MATRIX00(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_MATRIX00__SIZE),
  (Method:$00001b2c; Name:'NV2A_TX_SHADER_OFFSET_MATRIX01(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_MATRIX01__SIZE),
  (Method:$00001b30; Name:'NV2A_TX_SHADER_OFFSET_MATRIX11(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_MATRIX11__SIZE),
  (Method:$00001b34; Name:'NV2A_TX_SHADER_OFFSET_MATRIX10(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_MATRIX10__SIZE),
  (Method:$00001b38; Name:'NV2A_TX_SHADER_OFFSET_SCALE(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_SCALE__SIZE),
  (Method:$00001b3c; Name:'NV2A_TX_SHADER_OFFSET_OFFSET(x)'; Pitch:64; Count:NV2A_TX_SHADER_OFFSET_OFFSET__SIZE),
  (Method:$00001d6c; Name:'NV2A_SEMAPHORE_OFFSET'),
  (Method:$00001d70; Name:'NV2A_WRITE_SEMAPHORE_RELEASE'),
  (Method:$00001d78; Name:'NV2A_DEPTHCLIPCONTROL'),
  (Method:$00001d7c; Name:'NV2A_MULTISAMPLE_CONTROL'),
  (Method:$00001d80; Name:'NV2A_COMPRESS_ZBUFFER_EN'),
  (Method:$00001d84; Name:'NV2A_OCCLUDE_ZSTENCIL_EN'),
  (Method:$00001d8c; Name:'NV2A_CLEAR_DEPTH_VALUE'),
  (Method:$00001d90; Name:'NV2A_CLEAR_VALUE'),
  (Method:$00001d94; Name:'NV2A_CLEAR_BUFFERS'),
  (Method:$00001d98; Name:'NV2A_CLEAR_RECT_HORIZONTAL'),
  (Method:$00001d9c; Name:'NV2A_CLEAR_RECT_VERTICAL'),
  (Method:$00001e20; Name:'NV2A_RC_COLOR0'),
  (Method:$00001e24; Name:'NV2A_RC_COLOR1'),
  (Method:$00001e28; Name:'NV2A_BACK_MATERIAL_SHININESS(x)'; Count:NV2A_BACK_MATERIAL_SHININESS__SIZE),
  (Method:$00001e40; Name:'NV2A_RC_OUT_RGB(x)'; Count:NV2A_RC_OUT_RGB__SIZE),
  (Method:$00001e60; Name:'NV2A_RC_ENABLE'),
  (Method:$00001e68; Name:'NV2A_SHADOW_ZSLOPE_THRESHOLD'),
  (Method:$00001e6c; Name:'NV2A_TX_RCOMP'),
  (Method:$00001e70; Name:'NV2A_TX_SHADER_OP'),
  (Method:$00001e74; Name:'NV2A_TX_SHADER_DOTMAPPING'),
  (Method:$00001e78; Name:'NV2A_TX_SHADER_PREVIOUS'),
  (Method:$00001e94; Name:'NV2A_ENGINE'),
  (Method:$00001e98; Name:'NV2A_TRANSFORM_PROGRAM_CXT_WRITE_EN'),
  (Method:$00001e9c; Name:'NV2A_VP_UPLOAD_FROM_ID'),
  (Method:$00001ea0; Name:'NV2A_VP_START_FROM_ID'),
  (Method:$00001ea4; Name:'NV2A_VP_UPLOAD_CONST_ID') // Add 96 to constant index parameter
  );


type
  PNV2AInstance = ^RNV2AInstance;
  RNV2AInstance = record case Integer of
    // First definition : a complete record definition of the NV2A registers, based on CompactNV2AInfo :
    0: (
    // TODO : Change DWORDs to FLOAT or other appropriate types
      _00000000_Unknown: array [$0000..NV2A_NOP-1] of BYTE;
      {00000100}NOP: DWORD;
      {00000104}NOTIFY: DWORD;
      _00000108_Unknown: array [$0108..NV2A_WAIT_FOR_IDLE-1] of BYTE;
      {00000110}WAIT_FOR_IDLE: DWORD; // Dxbx
      _00000114_Unknown: array [$0114..NV2A_FLIP_READ-1] of BYTE;
      {00000120}FLIP_READ: DWORD;
      {00000124}FLIP_WRITE: DWORD;
      {00000128}FLIP_MODULO: DWORD;
      {0000012c}FLIP_INCREMENT_WRITE: DWORD;
      {00000130}FLIP_STALL: DWORD;
      _00000134_Unknown: array [$0134..NV2A_DMA_NOTIFY-1] of BYTE;
      {00000180}DMA_NOTIFY: DWORD;
      {00000184}DMA_TEXTURE0: DWORD;
      {00000188}DMA_TEXTURE1: DWORD;
      _0000018c_Unknown: array [$018c..NV2A_DMA_STATE-1] of BYTE;
      {00000190}DMA_STATE: DWORD;
      {00000194}DMA_COLOR: DWORD;
      {00000198}DMA_ZETA: DWORD;
      {0000019c}DMA_VTXBUF0: DWORD;
      {000001a0}DMA_VTXBUF1: DWORD;
      {000001a4}DMA_FENCE: DWORD;
      {000001a8}DMA_QUERY: DWORD;
      _000001ac_Unknown: array [$01ac..NV2A_RT_HORIZ-1] of BYTE;
      {00000200}RT_HORIZ: DWORD;
      {00000204}RT_VERT: DWORD;
      {00000208}RT_FORMAT: DWORD;
      {0000020c}RT_PITCH: DWORD;
      {00000210}COLOR_OFFSET: DWORD;
      {00000214}ZETA_OFFSET: DWORD;
      _00000218_Unknown: array [$0218..NV2A_RC_IN_ALPHA__0-1] of BYTE;
      {00000260}RC_IN_ALPHA: array [0..NV2A_RC_IN_ALPHA__SIZE-1] of DWORD;
      _00000280_Unknown: array [$0280..NV2A_RC_FINAL0-1] of BYTE;
      {00000288}RC_FINAL0: DWORD;
      {0000028c}RC_FINAL1: DWORD;
      {00000290}CONTROL0: DWORD;
      {00000294}LIGHT_MODEL: DWORD;
      {00000298}COLOR_MATERIAL: DWORD;
      {0000029c}FOG_MODE: DWORD;
      {000002a0}FOG_COORD: DWORD;
      {000002a4}FOG_ENABLE: DWORD;
      {000002a8}FOG_COLOR: DWORD;
      _000002ac_Unknown: array [$02ac..NV2A_VIEWPORT_CLIP_MODE-1] of BYTE;
      {000002b4}VIEWPORT_CLIP_MODE: DWORD;
      _000002b8_Unknown: array [$02b8..NV2A_VIEWPORT_CLIP_HORIZ__0-1] of BYTE;
      {000002c0}VIEWPORT_CLIP_HORIZ: array [0..NV2A_VIEWPORT_CLIP_HORIZ__SIZE-1] of DWORD;
      {000002e0}VIEWPORT_CLIP_VERT: array [0..NV2A_VIEWPORT_CLIP_VERT__SIZE-1] of DWORD;
      {00000300}ALPHA_FUNC_ENABLE: DWORD;
      {00000304}BLEND_FUNC_ENABLE: DWORD;
      {00000308}CULL_FACE_ENABLE: DWORD;
      {0000030c}DEPTH_TEST_ENABLE: DWORD;
      {00000310}DITHER_ENABLE: DWORD;
      {00000314}LIGHTING_ENABLE: DWORD;
      {00000318}POINT_PARAMETERS_ENABLE: DWORD;
      {0000031c}POINT_SMOOTH_ENABLE: DWORD;
      {00000320}LINE_SMOOTH_ENABLE: DWORD;
      {00000324}POLYGON_SMOOTH_ENABLE: DWORD;
      {00000328}SKIN_MODE: DWORD;
      {0000032c}STENCIL_ENABLE: DWORD;
      {00000330}POLYGON_OFFSET_POINT_ENABLE: DWORD;
      {00000334}POLYGON_OFFSET_LINE_ENABLE: DWORD;
      {00000338}POLYGON_OFFSET_FILL_ENABLE: DWORD;
      {0000033c}ALPHA_FUNC_FUNC: DWORD;
      {00000340}ALPHA_FUNC_REF: DWORD;
      {00000344}BLEND_FUNC_SRC: DWORD;
      {00000348}BLEND_FUNC_DST: DWORD;
      {0000034c}BLEND_COLOR: DWORD;
      {00000350}BLEND_EQUATION: DWORD;
      {00000354}DEPTH_FUNC: DWORD;
      {00000358}COLOR_MASK: DWORD;
      {0000035c}DEPTH_WRITE_ENABLE: DWORD;
      {00000360}STENCIL_MASK: DWORD;
      {00000364}STENCIL_FUNC_FUNC: DWORD;
      {00000368}STENCIL_FUNC_REF: DWORD;
      {0000036c}STENCIL_FUNC_MASK: DWORD;
      {00000370}STENCIL_OP_FAIL: DWORD;
      {00000374}STENCIL_OP_ZFAIL: DWORD;
      {00000378}STENCIL_OP_ZPASS: DWORD;
      {0000037c}SHADE_MODEL: DWORD;
      {00000380}LINE_WIDTH: DWORD;
      {00000384}POLYGON_OFFSET_FACTOR: FLOAT;
      {00000388}POLYGON_OFFSET_UNITS: FLOAT;
      {0000038c}POLYGON_MODE_FRONT: DWORD;
      {00000390}POLYGON_MODE_BACK: DWORD;
      {00000394}DEPTH_RANGE_NEAR: FLOAT;
      {00000398}DEPTH_RANGE_FAR: FLOAT;
      {0000039c}CULL_FACE: DWORD;
      {000003a0}FRONT_FACE: DWORD;
      {000003a4}NORMALIZE_ENABLE: DWORD;
      {000003a8}MATERIAL_FACTOR_FRONT_R: FLOAT;
      {000003ac}MATERIAL_FACTOR_FRONT_G: FLOAT;
      {000003b0}MATERIAL_FACTOR_FRONT_B: FLOAT;
      {000003b4}MATERIAL_FACTOR_FRONT_A: FLOAT;
      {000003b8}SEPARATE_SPECULAR_ENABLE: DWORD;
      {000003bc}ENABLED_LIGHTS: DWORD;
      {000003c0}TX_GEN_MODE: array [0..NV2A_TX_GEN_MODE_S__SIZE-1] of record
        {000003c0}TX_GEN_MODE_S: DWORD;
        {000003c4}TX_GEN_MODE_T: DWORD;
        {000003c8}TX_GEN_MODE_R: DWORD;
        {000003cc}TX_GEN_MODE_Q: DWORD;
        end;
      _00000400_Unknown: array [$0400..NV2A_TX_MATRIX_ENABLE__0-1] of BYTE;
      {00000420}TX_MATRIX_ENABLE: array [0..NV2A_TX_MATRIX_ENABLE__SIZE-1] of DWORD;
      _00000430_Unknown: array [$0430..NV2A_POINT_SIZE-1] of BYTE;
      {0000043c}POINT_SIZE: DWORD;
      {00000440}PROJECTION_MATRIX: array [0..NV2A_PROJECTION_MATRIX__SIZE-1] of FLOAT;
      {00000480}MODELVIEW0_MATRIX: array [0..NV2A_MODELVIEW0_MATRIX__SIZE-1] of FLOAT;
      {000004c0}MODELVIEW1_MATRIX: array [0..NV2A_MODELVIEW1_MATRIX__SIZE-1] of FLOAT;
      {00000500}MODELVIEW2_MATRIX: array [0..NV2A_MODELVIEW2_MATRIX__SIZE-1] of FLOAT;
      {00000540}MODELVIEW3_MATRIX: array [0..NV2A_MODELVIEW3_MATRIX__SIZE-1] of FLOAT;
      {00000580}INVERSE_MODELVIEW0_MATRIX: array [0..NV2A_INVERSE_MODELVIEW0_MATRIX__SIZE-1] of FLOAT;
      {000005c0}INVERSE_MODELVIEW1_MATRIX: array [0..NV2A_INVERSE_MODELVIEW1_MATRIX__SIZE-1] of FLOAT;
      {00000600}INVERSE_MODELVIEW2_MATRIX: array [0..NV2A_INVERSE_MODELVIEW2_MATRIX__SIZE-1] of FLOAT;
      {00000640}INVERSE_MODELVIEW3_MATRIX: array [0..NV2A_INVERSE_MODELVIEW3_MATRIX__SIZE-1] of FLOAT;
      {00000680}COMPOSITE_MATRIX: array [0..NV2A_COMPOSITE_MATRIX__SIZE-1] of FLOAT;
      {000006c0}TX0_MATRIX: array [0..NV2A_TX0_MATRIX__SIZE-1] of FLOAT;
      {00000700}TX1_MATRIX: array [0..NV2A_TX1_MATRIX__SIZE-1] of FLOAT;
      {00000740}TX2_MATRIX: array [0..NV2A_TX2_MATRIX__SIZE-1] of FLOAT;
      {00000780}TX3_MATRIX: array [0..NV2A_TX3_MATRIX__SIZE-1] of FLOAT;
      _000007c0_Unknown: array [$07c0..NV2A_TX_GEN_COEFF_S_A__0-1] of BYTE;
      {00000840}TX_GEN_COEFF: array [0..NV2A_TX_GEN_COEFF_S_A__SIZE-1] of record
        {00000840}TX_GEN_COEFF_S_A: FLOAT;
        {00000844}TX_GEN_COEFF_S_B: FLOAT;
        {00000848}TX_GEN_COEFF_S_C: FLOAT;
        {0000084c}TX_GEN_COEFF_S_D: FLOAT;
        {00000850}TX_GEN_COEFF_T_A: FLOAT;
        {00000854}TX_GEN_COEFF_T_B: FLOAT;
        {00000858}TX_GEN_COEFF_T_C: FLOAT;
        {0000085c}TX_GEN_COEFF_T_D: FLOAT;
        {00000860}TX_GEN_COEFF_R_A: FLOAT;
        {00000864}TX_GEN_COEFF_R_B: FLOAT;
        {00000868}TX_GEN_COEFF_R_C: FLOAT;
        {0000086c}TX_GEN_COEFF_R_D: FLOAT;
        {00000870}TX_GEN_COEFF_Q_A: FLOAT;
        {00000874}TX_GEN_COEFF_Q_B: FLOAT;
        {00000878}TX_GEN_COEFF_Q_C: FLOAT;
        {0000087c}TX_GEN_COEFF_Q_D: FLOAT;
        end;
      _00000940_Unknown: array [$0940..NV2A_FOG_EQUATION_CONSTANT-1] of BYTE;
      {000009c0}FOG_EQUATION_CONSTANT: DWORD;
      {000009c4}FOG_EQUATION_LINEAR: DWORD;
      {000009c8}FOG_EQUATION_QUADRATIC: DWORD;
      _000009cc_Unknown: array [$09cc..NV2A_FOG_PLANE__0-1] of BYTE;
      {000009d0}FOG_PLANE: array [0..NV2A_FOG_PLANE__SIZE-1] of FLOAT;
      {000009e0}FRONT_MATERIAL_SHININESS: array [0..NV2A_FRONT_MATERIAL_SHININESS__SIZE-1] of FLOAT;
      {000009f8}SWATH_WIDTH: DWORD;
      {000009fc}FLAT_SHADE_OP: DWORD;
      _00000a00_Unknown: array [$0a00..NV2A_LIGHT_MODEL_FRONT_AMBIENT_R-1] of BYTE;
      {00000a10}LIGHT_MODEL_FRONT_AMBIENT_R: FLOAT;
      {00000a14}LIGHT_MODEL_FRONT_AMBIENT_G: FLOAT;
      {00000a18}LIGHT_MODEL_FRONT_AMBIENT_B: FLOAT;
      _00000a1c_Unknown: array [$0a1c..NV2A_VIEWPORT_TRANSLATE_X-1] of BYTE;
      {00000a20}VIEWPORT_TRANSLATE_X: FLOAT;
      {00000a24}VIEWPORT_TRANSLATE_Y: FLOAT;
      {00000a28}VIEWPORT_TRANSLATE_Z: FLOAT;
      {00000a2c}VIEWPORT_TRANSLATE_W: FLOAT;
      {00000a30}POINT_PARAMETER: array [0..NV2A_POINT_PARAMETER__SIZE-1] of FLOAT;
      {00000a50}EYE_POSITION: array [0..NV2A_EYE_POSITION__SIZE-1] of FLOAT;
      {00000a60}RC_CONSTANT_COLOR0: array [0..NV2A_RC_CONSTANT_COLOR0__SIZE-1] of DWORD; // D3DCOLOR
      {00000a80}RC_CONSTANT_COLOR1: array [0..NV2A_RC_CONSTANT_COLOR1__SIZE-1] of DWORD; // D3DCOLOR
      {00000aa0}RC_OUT_ALPHA: array [0..NV2A_RC_OUT_ALPHA__SIZE-1] of DWORD;
      {00000ac0}RC_IN_RGB: array [0..NV2A_RC_IN_RGB__SIZE-1] of DWORD;
      {00000ae0}COLOR_KEY_COLOR: array [0..NV2A_COLOR_KEY_COLOR__SIZE-1] of DWORD;
      {00000af0}VIEWPORT_SCALE_X: FLOAT;
      {00000af4}VIEWPORT_SCALE_Y: FLOAT;
      {00000af8}VIEWPORT_SCALE_Z: FLOAT;
      {00000afc}VIEWPORT_SCALE_W: FLOAT;
      {00000b00}VP_UPLOAD_INST: array [0..NV2A_VP_UPLOAD_INST__SIZE-1] of DWORD;
      {00000b80}VP_UPLOAD_CONST: array [0..NV2A_VP_UPLOAD_CONST__SIZE-1] of FLOAT; // Can't use NOINCREMENT_FLAG, maximum of 32 writes
      {00000c00}LIGHT_BACK_AMBIENT: array [0..NV2A_LIGHT_BACK_AMBIENT_R__SIZE-1] of record
        {00000c00}LIGHT_BACK_AMBIENT_R: FLOAT;
        {00000c04}LIGHT_BACK_AMBIENT_G: FLOAT;
        {00000c08}LIGHT_BACK_AMBIENT_B: FLOAT;
        {00000c0c}LIGHT_BACK_DIFFUSE_R: FLOAT;
        {00000c10}LIGHT_BACK_DIFFUSE_G: FLOAT;
        {00000c14}LIGHT_BACK_DIFFUSE_B: FLOAT;
        {00000c18}LIGHT_BACK_SPECULAR_R: FLOAT;
        {00000c1c}LIGHT_BACK_SPECULAR_G: FLOAT;
        {00000c20}LIGHT_BACK_SPECULAR_B: FLOAT;
        _00000c24_Unknown: array [0..$1c-1] of BYTE;
        end;
      _00000e00_Unknown: array [$0e00..NV2A_LIGHT_FRONT_AMBIENT_R__0-1] of BYTE;
      {00001000}LIGHT_FRONT_AMBIENT: array[0..NV2A_LIGHT_FRONT_AMBIENT_R__SIZE-1] of record
        {00001000}LIGHT_FRONT_AMBIENT_R: FLOAT;
        {00001004}LIGHT_FRONT_AMBIENT_G: FLOAT;
        {00001008}LIGHT_FRONT_AMBIENT_B: FLOAT;
        {0000100c}LIGHT_FRONT_DIFFUSE_R: FLOAT;
        {00001010}LIGHT_FRONT_DIFFUSE_G: FLOAT;
        {00001014}LIGHT_FRONT_DIFFUSE_B: FLOAT;
        {00001018}LIGHT_FRONT_SPECULAR_R: FLOAT;
        {0000101c}LIGHT_FRONT_SPECULAR_G: FLOAT;
        {00001020}LIGHT_FRONT_SPECULAR_B: FLOAT;
        _00001024_Unknown: array [0..4-1] of BYTE;
        {00001028}LIGHT_HALF_VECTOR_X: FLOAT;
        {0000102c}LIGHT_HALF_VECTOR_Y: FLOAT;
        {00001030}LIGHT_HALF_VECTOR_Z: FLOAT;
        {00001034}LIGHT_DIRECTION_X: FLOAT;
        {00001038}LIGHT_DIRECTION_Y: FLOAT;
        {0000103c}LIGHT_DIRECTION_Z: FLOAT;
        {00001040}LIGHT_SPOT_CUTOFF_A: FLOAT;
        {00001044}LIGHT_SPOT_CUTOFF_B: FLOAT;
        {00001048}LIGHT_SPOT_CUTOFF_C: FLOAT;
        {0000104c}LIGHT_SPOT_DIR_X: FLOAT;
        {00001050}LIGHT_SPOT_DIR_Y: FLOAT;
        {00001054}LIGHT_SPOT_DIR_Z: FLOAT;
        {00001058}LIGHT_SPOT_CUTOFF_D: FLOAT;
        {0000105c}LIGHT_POSITION_X: FLOAT;
        {00001060}LIGHT_POSITION_Y: FLOAT;
        {00001064}LIGHT_POSITION_Z: FLOAT;
        {00001068}LIGHT_ATTENUATION_CONSTANT: FLOAT;
        {0000106c}LIGHT_ATTENUATION_LINEAR: FLOAT;
        {00001070}LIGHT_ATTENUATION_QUADRATIC: FLOAT;
        _00001074_Unknown: array [0..$c-1] of BYTE;
        end;
      _00001400_Unknown: array [$1400..NV2A_POLYGON_STIPPLE_ENABLE-1] of BYTE;
      {0000147c}POLYGON_STIPPLE_ENABLE: DWORD;
      {00001480}POLYGON_STIPPLE_PATTERN: array [0..NV2A_POLYGON_STIPPLE_PATTERN__SIZE-1] of DWORD;
      {00001500}VERTEX_POS_3F_X: FLOAT;
      {00001504}VERTEX_POS_3F_Y: FLOAT;
      {00001508}VERTEX_POS_3F_Z: FLOAT;
      _0000150c_Unknown: array [$150c..NV2A_VERTEX_POS_4F_X-1] of BYTE;
      {00001518}VERTEX_POS_4F_X: FLOAT;
      {0000151c}VERTEX_POS_4F_Y: FLOAT;
      {00001520}VERTEX_POS_4F_Z: FLOAT;
      _00001524_Unknown: array [$1524..NV2A_VERTEX_POS_3I_XY-1] of BYTE;
      {00001528}VERTEX_POS_3I_XY: DWORD;
      {0000152c}VERTEX_POS_3I_Z: DWORD;
      {00001530}VERTEX_NOR_3F_X: FLOAT;
      {00001534}VERTEX_NOR_3F_Y: FLOAT;
      {00001538}VERTEX_NOR_3F_Z: FLOAT;
      _0000153c_Unknown: array [$153c..NV2A_VERTEX_NOR_3I_XY-1] of BYTE;
      {00001540}VERTEX_NOR_3I_XY: DWORD;
      {00001544}VERTEX_NOR_3I_Z: DWORD;
      _00001548_Unknown: array [$1548..NV2A_VERTEX_COL_4F_X-1] of BYTE;
      {00001550}VERTEX_COL_4F_X: FLOAT;
      {00001554}VERTEX_COL_4F_Y: FLOAT;
      {00001558}VERTEX_COL_4F_Z: FLOAT;
      {0000155c}VERTEX_COL_4F_W: FLOAT;
      {00001560}VERTEX_COL_3F_X: FLOAT;
      {00001564}VERTEX_COL_3F_Y: FLOAT;
      {00001568}VERTEX_COL_3F_Z: FLOAT;
      {0000156c}VERTEX_COL_4I: DWORD;
      _00001570_Unknown: array [$1570..NV2A_VERTEX_COL2_3F_X-1] of BYTE;
      {00001580}VERTEX_COL2_3F_X: FLOAT;
      {00001584}VERTEX_COL2_3F_Y: FLOAT;
      {00001588}VERTEX_COL2_3F_Z: FLOAT;
      {0000158c}VERTEX_COL2_4I: FLOAT;
      {00001590}VERTEX_TX0_2F_S: FLOAT;
      {00001594}VERTEX_TX0_2F_T: FLOAT;
      {00001598}VERTEX_TX0_2I: DWORD;
      _0000159c_Unknown: array [$159c..NV2A_VERTEX_TX0_4F_S-1] of BYTE;
      {000015a0}VERTEX_TX0_4F_S: FLOAT;
      {000015a4}VERTEX_TX0_4F_T: FLOAT;
      {000015a8}VERTEX_TX0_4F_R: FLOAT;
      {000015ac}VERTEX_TX0_4F_Q: FLOAT;
      {000015b0}VERTEX_TX0_4I_ST: DWORD;
      {000015b4}VERTEX_TX0_4I_RQ: DWORD;
      {000015b8}VERTEX_TX1_2F_S: FLOAT;
      {000015bc}VERTEX_TX1_2F_T: FLOAT;
      {000015c0}VERTEX_TX1_2I: DWORD;
      _000015c4_Unknown: array [$15c4..NV2A_VERTEX_TX1_4F_S-1] of BYTE;
      {000015c8}VERTEX_TX1_4F_S: FLOAT;
      {000015cc}VERTEX_TX1_4F_T: FLOAT;
      {000015d0}VERTEX_TX1_4F_R: FLOAT;
      {000015d4}VERTEX_TX1_4F_Q: FLOAT;
      {000015d8}VERTEX_TX1_4I_ST: DWORD;
      {000015dc}VERTEX_TX1_4I_RQ: DWORD;
      {000015e0}VERTEX_TX2_2F_S: FLOAT;
      {000015e4}VERTEX_TX2_2F_T: FLOAT;
      {000015e8}VERTEX_TX2_2I: DWORD;
      _000015ec_Unknown: array [$15ec..NV2A_VERTEX_TX2_4F_S-1] of BYTE;
      {000015f0}VERTEX_TX2_4F_S: FLOAT;
      {000015f4}VERTEX_TX2_4F_T: FLOAT;
      {000015f8}VERTEX_TX2_4F_R: FLOAT;
      {000015fc}VERTEX_TX2_4F_Q: FLOAT;
      {00001600}VERTEX_TX2_4I_ST: DWORD;
      {00001604}VERTEX_TX2_4I_RQ: DWORD;
      {00001608}VERTEX_TX3_2F_S: FLOAT;
      {0000160c}VERTEX_TX3_2F_T: FLOAT;
      {00001610}VERTEX_TX3_2I: DWORD;
      _00001614_Unknown: array [$1614..NV2A_VERTEX_TX3_4F_S-1] of BYTE;
      {00001620}VERTEX_TX3_4F_S: FLOAT;
      {00001624}VERTEX_TX3_4F_T: FLOAT;
      {00001628}VERTEX_TX3_4F_R: FLOAT;
      {0000162c}VERTEX_TX3_4F_Q: FLOAT;
      {00001630}VERTEX_TX3_4I_ST: DWORD;
      {00001634}VERTEX_TX3_4I_RQ: DWORD;
      _00001638_Unknown: array [$1638..NV2A_VERTEX_FOG_1F-1] of BYTE;
      {00001698}VERTEX_FOG_1F: FLOAT;
      _0000169c_Unknown: array [$169c..NV2A_EDGEFLAG_ENABLE-1] of BYTE;
      {000016bc}EDGEFLAG_ENABLE: DWORD;
      _000016c0_Unknown: array [$16c0..NV2A_VTX_CACHE_INVALIDATE-1] of BYTE;
      {00001710}VTX_CACHE_INVALIDATE: DWORD;
      _00001714_Unknown: array [$1714..NV2A_VTXBUF_ADDRESS__0-1] of BYTE;
      {00001720}VTXBUF_ADDRESS: array [0..NV2A_VTXBUF_ADDRESS__SIZE-1] of DWORD;
      {00001760}VTXFMT: array [0..NV2A_VTXFMT__SIZE-1] of DWORD;
      {000017a0}LIGHT_MODEL_BACK_AMBIENT_R: FLOAT;
      {000017a4}LIGHT_MODEL_BACK_AMBIENT_G: FLOAT;
      {000017a8}LIGHT_MODEL_BACK_AMBIENT_B: FLOAT;
      {000017ac}MATERIAL_FACTOR_BACK_A: FLOAT;
      {000017b0}MATERIAL_FACTOR_BACK_R: FLOAT;
      {000017b4}MATERIAL_FACTOR_BACK_G: FLOAT;
      {000017b8}MATERIAL_FACTOR_BACK_B: FLOAT;
      {000017bc}COLOR_LOGIC_OP_ENABLE: DWORD;
      {000017c0}COLOR_LOGIC_OP_OP: DWORD;
      {000017c4}LIGHT_MODEL_TWO_SIDE_ENABLE: DWORD;
      _000017c8_Unknown: array [$17c8..NV2A_TX_SHADER_CULL_MODE-1] of BYTE;
      {000017f8}TX_SHADER_CULL_MODE: DWORD;
      {000017fc}VERTEX_BEGIN_END: DWORD; // Parameter is D3DPRIMITIVETYPE or 0 to end
      {00001800}VB_ELEMENT_U16: DWORD;
      _00001804_Unknown: array [$1804..NV2A_VB_ELEMENT_U32-1] of BYTE;
      {00001808}VB_ELEMENT_U32: DWORD;
      _0000180c_Unknown: array [$180c..NV2A_VB_VERTEX_BATCH-1] of BYTE;
      {00001810}VB_VERTEX_BATCH: DWORD;
      _00001814_Unknown: array [$1814..NV2A_VERTEX_DATA-1] of BYTE;
      {00001818}VERTEX_DATA: DWORD; // Use NOINCREMENT_FLAG
      {0000181c}TX_SHADER_CONST_EYE_X: DWORD;
      {00001820}TX_SHADER_CONST_EYE_Y: DWORD;
      {00001824}TX_SHADER_CONST_EYE_Z: DWORD;
      _00001828_Unknown: array [$1828..NV2A_VERTEX_DATA2F__0-1] of BYTE;
      {00001880}VERTEX_DATA2F: array [0..NV2A_VERTEX_DATA2F__SIZE-1] of record X, Y: FLOAT; end;
      {00001900}VERTEX_DATA2S: array [0..NV2A_VERTEX_DATA2S__SIZE-1] of record X, Y: USHORT; end;
//      {00001940}VERTEX_DATA4UB: array [0..NV2A_VERTEX_DATA4UB__SIZE-1] of record X, Y, Z, W: BYTE; end;
      {00001940}VERTEX_DATA4UB: array [0..NV2A_VERTEX_DATA4UB__SIZE-1] of DWORD; // Order:POSITION,WEIGHT,NORMAL,DIFFUSE,SPECULAR,FOG,POINT_SIZE,BACK_DIFFUSE,BACK_SPECULAR,TEXTURE0,-1,-2,-3,?,?,?
      {00001980}VERTEX_DATA4S: array [0..NV2A_VERTEX_DATA4S__SIZE-1] of record X, Y, Z, W: USHORT; end;
      {00001a00}VERTEX_DATA4F: array [0..NV2A_VERTEX_DATA4F__SIZE-1] of record X, Y, Z, W: FLOAT; end;
      {00001b00}TX_OFFSET: array [0..NV2A_TX_OFFSET__SIZE-1] of record
        {00001b00}TX_OFFSET: DWORD;
        {00001b04}TX_FORMAT: DWORD;
        {00001b08}TX_WRAP: DWORD;
        {00001b0c}TX_ENABLE: DWORD;
        {00001b10}TX_NPOT_PITCH: DWORD;
        {00001b14}TX_FILTER: DWORD;
        _00001b18_Unknown: array [$1b18..NV2A_TX_NPOT_SIZE__0-1] of BYTE;
        {00001b1c}TX_NPOT_SIZE: DWORD;
        {00001b20}TX_PALETTE_OFFSET: DWORD;
        {00001b24}TX_BORDER_COLOR: DWORD;
        {00001b28}TX_SHADER_OFFSET_MATRIX00: DWORD;
        {00001b2c}TX_SHADER_OFFSET_MATRIX01: DWORD;
        {00001b30}TX_SHADER_OFFSET_MATRIX11: DWORD;
        {00001b34}TX_SHADER_OFFSET_MATRIX10: DWORD;
        {00001b38}TX_SHADER_OFFSET_SCALE: DWORD;
        {00001b3c}TX_SHADER_OFFSET_OFFSET: DWORD;
        end;
      _00001c00_Unknown: array [$1c00..NV2A_SEMAPHORE_OFFSET-1] of BYTE;
      {00001d6c}SEMAPHORE_OFFSET: DWORD;
      {00001d70}WRITE_SEMAPHORE_RELEASE: DWORD;
      _00001d74_Unknown: array [$1d74..NV2A_DEPTHCLIPCONTROL-1] of BYTE;
      {00001d78}DEPTHCLIPCONTROL: DWORD;
      {00001d7c}MULTISAMPLE_CONTROL: DWORD;
      {00001d80}COMPRESS_ZBUFFER_EN: DWORD;
      {00001d84}OCCLUDE_ZSTENCIL_EN: DWORD;
      _00001d88_Unknown: array [$1d88..NV2A_CLEAR_DEPTH_VALUE-1] of BYTE;
      {00001d8c}CLEAR_DEPTH_VALUE: DWORD;
      {00001d90}CLEAR_VALUE: DWORD;
      {00001d94}CLEAR_BUFFERS: DWORD;
      {00001d98}CLEAR_RECT_HORIZONTAL: DWORD;
      {00001d9c}CLEAR_RECT_VERTICAL: DWORD;
      _00001da0_Unknown: array [$1da0..NV2A_RC_COLOR0-1] of BYTE;
      {00001e20}RC_COLOR0: DWORD;
      {00001e24}RC_COLOR1: DWORD;
      {00001e28}BACK_MATERIAL_SHININESS: array [0..NV2A_BACK_MATERIAL_SHININESS__SIZE-1] of DWORD;
      {00001e40}RC_OUT_RGB: array [0..NV2A_RC_OUT_RGB__SIZE-1] of DWORD;
      {00001e60}RC_ENABLE: DWORD;
      _00001e64_Unknown: array [$1e64..NV2A_SHADOW_ZSLOPE_THRESHOLD-1] of BYTE;
      {00001e68}SHADOW_ZSLOPE_THRESHOLD: DWORD;
      {00001e6c}TX_RCOMP: DWORD;
      {00001e70}TX_SHADER_OP: DWORD;
      {00001e74}TX_SHADER_DOTMAPPING: DWORD;
      {00001e78}TX_SHADER_PREVIOUS: DWORD;
      _00001e7c_Unknown: array [$1e7c..NV2A_ENGINE-1] of BYTE;
      {00001e94}ENGINE: DWORD;
      {00001e98}TRANSFORM_PROGRAM_CXT_WRITE_EN: DWORD;
      {00001e9c}VP_UPLOAD_FROM_ID: DWORD;
      {00001ea0}VP_START_FROM_ID: DWORD;
      {00001ea4}VP_UPLOAD_CONST_ID: DWORD; // Add 96 to constant index parameter
      _00001ea8_Unknown: array [$1ea8..$2000-1] of BYTE;
    );
    // Overlay this with an array of DWORDs, so that we can access them in a generic way too :
    1: (Registers: array [0..NV2A_Max div 4] of DWORD);
  end;

var
  NV2AInfo: array of record
    Method: Integer;
    Name: string;
  end;

 implementation

uses
  // Delphi
  SysUtils;

procedure InitNV2AInfo;
// Decode all compacted defines into a direct-lookup table (with correctly expanded names)
var
  i, mi, ci: Integer;
begin
  i := Length(CompactNV2AInfo);
  SetLength(NV2AInfo, (CompactNV2AInfo[i-1].Method div 4) + 1);

  while i > 0 do
  begin
    Dec(i);
    ci := CompactNV2AInfo[i].Count;
    if ci = 0 then
    begin
      // Only one value, just determine it's index and put it there :
      mi := CompactNV2AInfo[i].Method div 4;
      Assert(NV2AInfo[mi].Method = 0); // Check against overwrite

      NV2AInfo[mi].Method := mi * 4;
      NV2AInfo[mi].Name := CompactNV2AInfo[i].Name;
    end
    else
      // Handle multiple indexes :
      while ci > 0 do
      begin
        Dec(ci);
        // Calculate the index, using the supplied pitch :
        mi := CompactNV2AInfo[i].Pitch; if mi = 0 then mi := 4;
        mi := (CompactNV2AInfo[i].Method + (ci * mi)) div 4;
        Assert(NV2AInfo[mi].Method = 0); // Check against overwrite

        // Put the value there, but replace '(x)' in the name with the correct index :
        NV2AInfo[mi].Method := mi * 4;
        NV2AInfo[mi].Name := StringReplace(CompactNV2AInfo[i].Name, '(x)', Format('(%d)', [ci]), []);
      end;
  end;
end;

initialization

  Assert(@(PNV2AInstance(nil)._00001ea8_Unknown) = Pointer($00001ea8), 'RNV2AInstance declaration incorrect!');

  InitNV2AInfo;

end.
